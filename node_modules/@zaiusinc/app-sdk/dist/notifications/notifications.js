"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.notifications = exports.setNotifier = void 0;
const logging_1 = require("../logging");
const LocalNotifier_1 = require("./LocalNotifier");
let notifier = new LocalNotifier_1.LocalNotifier();
/**
 * @hidden
 */
const setNotifier = (otherNotifier) => {
    notifier = otherNotifier;
};
exports.setNotifier = setNotifier;
const validate = (activity, title, summary, _details) => {
    const errors = [];
    if (activity.trim().length === 0) {
        errors.push('activity cannot be blank');
    }
    if (title.trim().length === 0) {
        errors.push('title cannot be blank');
    }
    if (summary.trim().length === 0) {
        errors.push('summary cannot be blank');
    }
    if (errors.length === 0) {
        return true;
    }
    else {
        logging_1.logger.error(`Unable to send notification: ${errors.join(', ')}`);
        return false;
    }
};
function getNotifier() {
    return global.ocpContextStorage?.getStore()?.ocpRuntime?.notifier || notifier;
}
/**
 * Namespace for accessing notifications
 */
exports.notifications = {
    async info(activity, title, summary, details) {
        if (validate(activity, title, summary, details)) {
            await getNotifier().info(activity, title, summary, details);
        }
    },
    async success(activity, title, summary, details) {
        if (validate(activity, title, summary, details)) {
            await getNotifier().success(activity, title, summary, details);
        }
    },
    async warn(activity, title, summary, details) {
        if (validate(activity, title, summary, details)) {
            await getNotifier().warn(activity, title, summary, details);
        }
    },
    async error(activity, title, summary, details) {
        if (validate(activity, title, summary, details)) {
            await getNotifier().error(activity, title, summary, details);
        }
    }
};
//# sourceMappingURL=notifications.js.map