"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const async_hooks_1 = require("async_hooks");
require("jest");
const __1 = require("..");
const LocalNotifier_1 = require("../LocalNotifier");
describe('activityLog', () => {
    const mockNotifier = {
        info: jest.fn(),
        success: jest.fn(),
        warn: jest.fn(),
        error: jest.fn()
    };
    function runWithAsyncLocalStore(code) {
        const ocpContextStorage = new async_hooks_1.AsyncLocalStorage();
        global.ocpContextStorage = ocpContextStorage;
        const context = {
            ocpRuntime: {
                notifier: mockNotifier
            }
        };
        ocpContextStorage.run(context, code);
    }
    afterEach(() => {
        jest.resetAllMocks();
    });
    describe('initialize - async local store configuration', () => {
        it('uses local notifier if not provided in OCP runtime in global context', async () => {
            const infoFunction = jest.spyOn(LocalNotifier_1.LocalNotifier.prototype, 'info').mockImplementation(() => Promise.resolve());
            const successFunction = jest
                .spyOn(LocalNotifier_1.LocalNotifier.prototype, 'success')
                .mockImplementation(() => Promise.resolve());
            const warnFunction = jest.spyOn(LocalNotifier_1.LocalNotifier.prototype, 'warn').mockImplementation(() => Promise.resolve());
            const errorFunction = jest.spyOn(LocalNotifier_1.LocalNotifier.prototype, 'error').mockImplementation(() => Promise.resolve());
            await __1.notifications.info('activity', 'title', 'summary', 'detail');
            await __1.notifications.success('activity', 'title', 'summary', 'detail');
            await __1.notifications.warn('activity', 'title', 'summary', 'detail');
            await __1.notifications.error('activity', 'title', 'summary', 'detail');
            expect(infoFunction).toHaveBeenCalled();
            expect(successFunction).toHaveBeenCalled();
            expect(warnFunction).toHaveBeenCalled();
            expect(errorFunction).toHaveBeenCalled();
        });
        it('uses notifier from OCP runtime from global context if provided', async () => {
            runWithAsyncLocalStore(async () => {
                await __1.notifications.info('activity', 'title', 'summary', 'detail');
                expect(mockNotifier.info).toHaveBeenCalled();
                await __1.notifications.success('activity', 'title', 'summary', 'detail');
                expect(mockNotifier.success).toHaveBeenCalled();
                await __1.notifications.warn('activity', 'title', 'summary', 'detail');
                expect(mockNotifier.warn).toHaveBeenCalled();
                await __1.notifications.error('activity', 'title', 'summary', 'detail');
                expect(mockNotifier.error).toHaveBeenCalled();
            });
        });
        it('validates input - do not notify for invalid input', async () => {
            runWithAsyncLocalStore(async () => {
                await __1.notifications.info(' ', 'title', 'summary', 'detail');
                expect(mockNotifier.info).not.toHaveBeenCalled();
                await __1.notifications.success('activity', ' ', 'summary', 'detail');
                expect(mockNotifier.success).not.toHaveBeenCalled();
                await __1.notifications.warn('activity', 'title', ' ', 'detail');
                expect(mockNotifier.warn).not.toHaveBeenCalled();
            });
        });
    });
    describe('initialize - module scope', () => {
        it('replaces the local notifier with the provided notifier', async () => {
            (0, __1.setNotifier)(mockNotifier);
            await __1.notifications.info('activity', 'title', 'summary', 'detail');
            expect(mockNotifier.info).toHaveBeenCalled();
            await __1.notifications.success('activity', 'title', 'summary', 'detail');
            expect(mockNotifier.success).toHaveBeenCalled();
            await __1.notifications.warn('activity', 'title', 'summary', 'detail');
            expect(mockNotifier.warn).toHaveBeenCalled();
            await __1.notifications.error('activity', 'title', 'summary', 'detail');
            expect(mockNotifier.error).toHaveBeenCalled();
        });
        it('validates input - do not notify for invalid input', async () => {
            (0, __1.setNotifier)(mockNotifier);
            await __1.notifications.info(' ', 'title', 'summary', 'detail');
            expect(mockNotifier.info).not.toHaveBeenCalled();
            await __1.notifications.success('activity', ' ', 'summary', 'detail');
            expect(mockNotifier.success).not.toHaveBeenCalled();
            await __1.notifications.warn('activity', 'title', ' ', 'detail');
            expect(mockNotifier.warn).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=notifications.test.js.map