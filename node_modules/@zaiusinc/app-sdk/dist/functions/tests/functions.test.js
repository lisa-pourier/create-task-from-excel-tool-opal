"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const async_hooks_1 = require("async_hooks");
require("jest");
const LocalFunctionApi_1 = require("../LocalFunctionApi");
const functions_1 = require("../functions");
describe('functions', () => {
    const mockFunctionApi = {
        getEndpoints: jest.fn(),
        getGlobalEndpoints: jest.fn(),
        getAuthorizationGrantUrl: jest.fn()
    };
    function runWithAsyncLocalStore(code) {
        const ocpContextStorage = new async_hooks_1.AsyncLocalStorage();
        global.ocpContextStorage = ocpContextStorage;
        const context = {
            ocpRuntime: {
                functionApi: mockFunctionApi
            }
        };
        ocpContextStorage.run(context, code);
    }
    afterEach(() => {
        jest.resetAllMocks();
    });
    describe('async local store configured', () => {
        it('uses local functions if not configured', async () => {
            const getEndpointsFn = jest.spyOn(LocalFunctionApi_1.LocalFunctionApi.prototype, 'getEndpoints');
            expect(() => functions_1.functions.getEndpoints()).toThrow();
            expect(getEndpointsFn).toHaveBeenCalled();
        });
        it('uses the configured implementation for getAllEndpoints', async () => {
            runWithAsyncLocalStore(async () => {
                await functions_1.functions.getEndpoints();
            });
            expect(mockFunctionApi.getEndpoints).toHaveBeenCalled();
        });
        it('uses the configured implementation for getGlobalEndpoints', async () => {
            runWithAsyncLocalStore(async () => {
                await functions_1.functions.getGlobalEndpoints();
            });
            expect(mockFunctionApi.getGlobalEndpoints).toHaveBeenCalled();
        });
        it('uses the configured implementation for getAuthorizationGrantUrl', () => {
            runWithAsyncLocalStore(() => {
                functions_1.functions.getAuthorizationGrantUrl();
            });
            expect(mockFunctionApi.getAuthorizationGrantUrl).toHaveBeenCalled();
        });
    });
    describe('module scope config', () => {
        it('uses the configured implementation for getAllEndpoints', async () => {
            (0, functions_1.initializeFunctionApi)(mockFunctionApi);
            await functions_1.functions.getEndpoints();
            expect(mockFunctionApi.getEndpoints).toHaveBeenCalled();
        });
        it('uses the configured implementation for getGlobalEndpoints', async () => {
            (0, functions_1.initializeFunctionApi)(mockFunctionApi);
            await functions_1.functions.getGlobalEndpoints();
            expect(mockFunctionApi.getGlobalEndpoints).toHaveBeenCalled();
        });
        it('uses the configured implementation for getAuthorizationGrantUrl', () => {
            (0, functions_1.initializeFunctionApi)(mockFunctionApi);
            functions_1.functions.getAuthorizationGrantUrl();
            expect(mockFunctionApi.getAuthorizationGrantUrl).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=functions.test.js.map