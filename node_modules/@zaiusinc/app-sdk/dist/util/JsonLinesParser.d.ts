import { Transform } from 'stream';
declare const NULL_VALUE_UNIQUE_KEY: unique symbol;
export type NullValue = typeof NULL_VALUE_UNIQUE_KEY & never;
export declare const nullValue: NullValue;
export interface Options {
    /**
     * Specifies the number of lines at the beginning of a data file that the parser should skip over, prior to parsing
     * headers.
     * @default 0
     */
    readonly skipLines?: number;
    /**
     * Maximum number of bytes per row. An error is thrown if a line exceeds this value.
     * The default value is on 8 peta byte.
     * @default Number.MAX_SAFE_INTEGER
     */
    readonly maxRowBytes?: number;
    /**
     * If 'true', the parser will expect the data as arrays of values. Otherwise the data will be treated as regular
     * objects per line.
     * @default false
     */
    readonly tabularFormat?: boolean;
    /**
     * Specifies the headers to use. Headers define the property key for each value in a JsonLines row. If no `headers`
     * option is provided, `JsonLinesParser` will use the first line in a JsonLines file as the header specification.
     * This option needs {@link tabularFormat} in 'true'.
     */
    readonly headers?: readonly string[] | boolean;
    /**
     * If `true`, instructs the parser that the number of columns
     * in each row must match the number of `headers` specified.
     * This option needs {@link tabularFormat} in 'true'.
     */
    readonly strict?: boolean;
}
export declare function parse(opts: Options): Transform;
export {};
//# sourceMappingURL=JsonLinesParser.d.ts.map