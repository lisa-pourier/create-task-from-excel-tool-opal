"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonLinesStream = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const url_1 = require("url");
const zlib = __importStar(require("zlib"));
const FileStream_1 = require("./FileStream");
const JsonLinesParser_1 = require("./JsonLinesParser");
class JsonLinesStream extends FileStream_1.FileStream {
    /**
     * Build a JsonLinesStream from an existing ReadableStream.
     * @param stream source stream for the JsonLines data
     * @param processor the row processor
     * @param options options to provide the JsonLinesParser {@link Options}
     */
    static fromStream(stream, processor, options = {}) {
        return new JsonLinesStream(async () => stream, processor, options);
    }
    /**
     * Build a JsonLinesStream that reads from a web resource.
     * @param url source url for the JsonLines data
     * @param processor the row processor
     * @param options options to provide the JsonLinesParser {@link Options}
     */
    static fromUrl(url, processor, options = {}) {
        const builder = async () => {
            const response = await (0, node_fetch_1.default)(url);
            const pipeline = response.body;
            return /\.gz$/.test(new url_1.URL(url).pathname) ? pipeline.pipe(zlib.createGunzip()) : pipeline;
        };
        return new JsonLinesStream(builder, processor, options);
    }
    constructor(streamBuilder, rowProcessor, options = {}) {
        super(streamBuilder, rowProcessor, JsonLinesParser_1.parse, options);
    }
}
exports.JsonLinesStream = JsonLinesStream;
//# sourceMappingURL=JsonLinesStream.js.map