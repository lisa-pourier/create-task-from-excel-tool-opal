"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("jest");
const nock_1 = __importDefault(require("nock"));
const ObjectHash = __importStar(require("object-hash"));
const stream_1 = require("stream");
const CsvStream_1 = require("../CsvStream");
class TestCsvRowProcessor {
    completed;
    readRows;
    constructor(completed = false, readRows = []) {
        this.completed = completed;
        this.readRows = readRows;
    }
    get isCompleted() {
        return this.completed;
    }
    get rows() {
        return this.readRows;
    }
    async process(row) {
        this.rows.push(row);
        return this.rows.length % 2 === 0;
    }
    async complete() {
        this.completed = true;
    }
}
class FailingCompleteCsvLinesRowProcessor extends TestCsvRowProcessor {
    async complete() {
        throw new Error('complete failed');
    }
}
class FailingProcessJsonLinesRowProcessor extends TestCsvRowProcessor {
    failed = false;
    async process(_) {
        if (!this.failed) {
            this.failed = true;
            throw new Error('process failed');
        }
        return super.process(_);
    }
}
describe('CsvStream', () => {
    const processAndVerify = async (stream, processor) => {
        await stream.processSome();
        expect(processor.isCompleted).toBe(true);
        expect(processor.rows.length).toBe(1);
        expect(processor.rows[0]).toEqual({
            col1: 'val1',
            col2: 'val2',
            col3: 'val3'
        });
    };
    const processAndVerifyError = async (stream, processor, error) => {
        await expect(() => stream.processSome()).rejects.toThrowError(error);
        expect(processor.isCompleted).toBe(false);
    };
    it('builds instances processes from a stream', async () => {
        const readable = new stream_1.Stream.Readable();
        readable.push('col1,col2,col3\nval1,val2,val3\n');
        readable.push(null);
        const processor = new TestCsvRowProcessor();
        await processAndVerify(CsvStream_1.CsvStream.fromStream(readable, processor), processor);
    });
    it('builds instances processes from a url', async () => {
        (0, nock_1.default)('https://zaius.app.sdk').get('/csv').reply(200, 'col1,col2,col3\nval1,val2,val3\n');
        const processor = new TestCsvRowProcessor();
        await processAndVerify(CsvStream_1.CsvStream.fromUrl('https://zaius.app.sdk/csv', processor), processor);
    });
    it('passes along config for csv-parser', async () => {
        const readable = new stream_1.Stream.Readable();
        readable.push('COL1,COL2,COL3\nVAL1,VAL2,VAL3\n');
        readable.push(null);
        const options = {
            mapHeaders: ({ header }) => header.toLowerCase(),
            mapValues: ({ value }) => value.toLowerCase()
        };
        const processor = new TestCsvRowProcessor();
        await processAndVerify(CsvStream_1.CsvStream.fromStream(readable, processor, options), processor);
    });
    it('should pause and resume', async () => {
        const readable = new stream_1.Stream.Readable();
        readable.push('col1,col2,col3\n');
        readable.push('val1,val2,val3\n');
        readable.push('val4,val5,val6\n');
        readable.push('val7,val8,val9\n');
        readable.push(null);
        const processor = new TestCsvRowProcessor();
        const stream = CsvStream_1.CsvStream.fromStream(readable, processor);
        await stream.processSome();
        expect(processor.isCompleted).toBe(false);
        expect(processor.rows.length).toBe(2);
        expect(processor.rows[0]).toEqual({
            col1: 'val1',
            col2: 'val2',
            col3: 'val3'
        });
        expect(processor.rows[1]).toEqual({
            col1: 'val4',
            col2: 'val5',
            col3: 'val6'
        });
        await stream.processSome();
        expect(processor.isCompleted).toBe(true);
        expect(processor.rows.length).toBe(3);
        expect(processor.rows[2]).toEqual({
            col1: 'val7',
            col2: 'val8',
            col3: 'val9'
        });
    });
    it('should fast forward to a specified record and resume', async () => {
        const readable = new stream_1.Stream.Readable();
        readable.push('col1,col2,col3\n');
        readable.push('val1,val2,val3\n');
        readable.push('val4,val5,val6\n');
        readable.push(null);
        const processor = new TestCsvRowProcessor();
        const marker = ObjectHash.sha1({
            col1: 'val1',
            col2: 'val2',
            col3: 'val3'
        });
        const stream = CsvStream_1.CsvStream.fromStream(readable, processor);
        await stream.fastforward(marker);
        await stream.processSome();
        expect(processor.isCompleted).toBe(true);
        expect(processor.rows.length).toBe(1);
        expect(processor.rows[0]).toEqual({
            col1: 'val4',
            col2: 'val5',
            col3: 'val6'
        });
    });
    it('should throw error when complete method fails', async () => {
        const readable = new stream_1.Stream.Readable();
        readable.push('col1,col2,col3\n');
        readable.push(null);
        const processor = new FailingCompleteCsvLinesRowProcessor();
        await processAndVerifyError(CsvStream_1.CsvStream.fromStream(readable, processor), processor, 'complete failed');
    });
    it('should throw error when process method fails and allow further processing', async () => {
        const readable = new stream_1.Stream.Readable();
        readable.push('col1,col2,col3\n');
        readable.push('fail1,fail2,fail3\n');
        readable.push('val1,val2,val3\n');
        readable.push(null);
        const processor = new FailingProcessJsonLinesRowProcessor();
        const stream = CsvStream_1.CsvStream.fromStream(readable, processor);
        await processAndVerifyError(stream, processor, 'process failed');
        await processAndVerify(stream, processor);
    });
});
//# sourceMappingURL=CsvStream.test.js.map