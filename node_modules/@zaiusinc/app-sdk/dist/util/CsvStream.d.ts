import { Options } from 'csv-parser';
import { FileReadableStreamBuilder, FileRowProcessor, FileStream } from './FileStream';
export interface CsvRow {
    [column: string]: string;
}
export type CsvRowProcessor<T = CsvRow> = FileRowProcessor<T>;
/**
 * Builds source streams for the CsvStream to process.
 */
export type CsvReadableStreamBuilder = FileReadableStreamBuilder;
export declare class CsvStream<T> extends FileStream<T, Options> {
    /**
     * Build a CsvStream from an existing ReadableStream.
     * @param stream source stream for the csv data
     * @param processor the row processor
     * @param options options to provide the underlying parser,
     * see https://github.com/mafintosh/csv-parser#csvoptions--headers
     */
    static fromStream<T>(stream: NodeJS.ReadableStream, processor: CsvRowProcessor<T>, options?: Options): CsvStream<T>;
    /**
     * Build a CsvStream that reads from a web resource.
     * @param url source url for the csv data
     * @param processor the row processor
     * @param options options to provide the underlying parser,
     * see https://github.com/mafintosh/csv-parser#csvoptions--headers
     */
    static fromUrl<T>(url: string, processor: CsvRowProcessor<T>, options?: Options): CsvStream<T>;
    constructor(streamBuilder: CsvReadableStreamBuilder, rowProcessor: CsvRowProcessor<T>, options?: Options);
}
//# sourceMappingURL=CsvStream.d.ts.map