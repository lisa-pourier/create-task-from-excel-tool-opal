import { Transform } from 'stream';
export interface FileRowProcessor<T> {
    /**
     * Process a row from a file.
     * @param row to process
     * @return true if it is safe to pause after this row, false otherwise
     */
    process(row: T): Promise<boolean>;
    /**
     * Complete any pending work. Called when the source file has
     * been completely processed.
     */
    complete(): Promise<void>;
}
/**
 * Builds source streams for the FileStream to process.
 */
export type FileReadableStreamBuilder = () => Promise<NodeJS.ReadableStream>;
/**
 * Superclass of stream file reader with the main
 * logic involve in processing a file line by line
 */
export declare abstract class FileStream<T, O> {
    private streamBuilder;
    private rowProcessor;
    private parser;
    private options;
    private readStream?;
    private pipelineFinished;
    private onPause;
    private onError;
    private resume?;
    private fastforwardMarker?;
    constructor(streamBuilder: FileReadableStreamBuilder, rowProcessor: FileRowProcessor<T>, parser: (args: O) => Transform, options?: O);
    get isFinished(): boolean;
    fastforward(target: string): Promise<string | null>;
    processSome(): Promise<string | null>;
    private createPipe;
}
//# sourceMappingURL=FileStream.d.ts.map