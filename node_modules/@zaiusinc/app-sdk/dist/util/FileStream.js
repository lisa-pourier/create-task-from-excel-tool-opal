"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileStream = void 0;
const ObjectHash = __importStar(require("object-hash"));
const stream_1 = require("stream");
const logging_1 = require("../logging");
/**
 * Superclass of stream file reader with the main
 * logic involve in processing a file line by line
 */
class FileStream {
    streamBuilder;
    rowProcessor;
    parser;
    options;
    readStream;
    pipelineFinished = false;
    onPause;
    onError;
    resume;
    fastforwardMarker;
    constructor(streamBuilder, rowProcessor, parser, options = {}) {
        this.streamBuilder = streamBuilder;
        this.rowProcessor = rowProcessor;
        this.parser = parser;
        this.options = options;
    }
    get isFinished() {
        return this.pipelineFinished;
    }
    async fastforward(target) {
        this.fastforwardMarker = target;
        return this.processSome();
    }
    async processSome() {
        if (this.pipelineFinished) {
            return null;
        }
        if (!this.readStream) {
            await this.createPipe();
        }
        return new Promise((resolve, reject) => {
            this.onError = reject;
            this.onPause = (marker) => {
                resolve(marker);
            };
            if (this.resume) {
                this.resume();
            }
            else {
                this.readStream?.resume();
            }
        });
    }
    async createPipe() {
        let pipeline = (this.readStream = await this.streamBuilder());
        const rowProcessor = this.rowProcessor;
        const transform = this.parser(this.options);
        transform.on('error', (error) => {
            this.onError(error);
        });
        pipeline = pipeline.pipe(transform).pipe(new stream_1.Stream.Transform({
            writableObjectMode: true,
            transform: (row, _, callback) => {
                // if we're fastforwarding in order to resume
                if (this.fastforwardMarker) {
                    if (this.fastforwardMarker === ObjectHash.sha1(row)) {
                        this.resume = callback;
                        const hash = this.fastforwardMarker;
                        this.fastforwardMarker = undefined;
                        this.onPause(hash);
                    }
                    else {
                        callback();
                    }
                }
                else {
                    rowProcessor
                        .process(row)
                        .then((canPause) => {
                        if (canPause) {
                            this.resume = callback;
                            this.onPause(ObjectHash.sha1(row));
                        }
                        else {
                            callback();
                        }
                    })
                        .catch((error) => {
                        logging_1.logger.error(error, 'on row:', row);
                        this.resume = callback;
                        this.onError(error);
                    });
                }
            }
        }));
        pipeline.on('finish', async (error) => {
            this.pipelineFinished = true;
            this.resume = undefined;
            if (error) {
                this.onError(error);
            }
            else {
                await this.rowProcessor
                    .complete()
                    .then(() => this.onPause(null))
                    .catch((e) => this.onError(e));
            }
        });
        this.readStream.pause();
    }
}
exports.FileStream = FileStream;
//# sourceMappingURL=FileStream.js.map