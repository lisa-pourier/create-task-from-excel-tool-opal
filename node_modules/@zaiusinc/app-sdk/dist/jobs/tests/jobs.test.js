"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const async_hooks_1 = require("async_hooks");
require("jest");
const LocalJobApi_1 = require("../LocalJobApi");
const jobs_1 = require("../jobs");
describe('jobs', () => {
    const mockJobApi = {
        trigger: jest.fn(),
        getDetail: jest.fn(),
        getStatus: jest.fn()
    };
    const mockJobId = '8157c520-b0a3-47c7-a8a6-b09d3ca24b78';
    function runWithAsyncLocalStore(code) {
        const ocpContextStorage = new async_hooks_1.AsyncLocalStorage();
        global.ocpContextStorage = ocpContextStorage;
        const context = {
            ocpRuntime: {
                jobApi: mockJobApi
            }
        };
        ocpContextStorage.run(context, code);
    }
    afterEach(() => {
        jest.resetAllMocks();
    });
    describe('async local store configured', () => {
        it('uses local job Api if not configured', async () => {
            const getEndpointsFn = jest.spyOn(LocalJobApi_1.LocalJobApi.prototype, 'trigger');
            expect(() => jobs_1.jobs.trigger('foot', {})).toThrow();
            expect(getEndpointsFn).toHaveBeenCalled();
        });
        it('uses the configured implementation for trigger', async () => {
            runWithAsyncLocalStore(async () => {
                await jobs_1.jobs.trigger('foo', {});
            });
            expect(mockJobApi.trigger).toHaveBeenCalled();
        });
        it('uses the configured implementation for getJobDetail', async () => {
            runWithAsyncLocalStore(async () => {
                await jobs_1.jobs.getDetail(mockJobId);
            });
            expect(mockJobApi.getDetail).toHaveBeenCalledWith(mockJobId);
        });
        it('uses the configured implementation for getStatus', async () => {
            runWithAsyncLocalStore(async () => {
                await jobs_1.jobs.getStatus(mockJobId);
            });
            expect(mockJobApi.getStatus).toHaveBeenCalledWith(mockJobId);
        });
    });
    describe('module scope config', () => {
        it('uses the configured implementation for trigger', async () => {
            (0, jobs_1.initializeJobApi)(mockJobApi);
            await jobs_1.jobs.trigger('foo', {});
            expect(mockJobApi.trigger).toHaveBeenCalled();
        });
        it('uses the configured implementation for getJobDetail', async () => {
            (0, jobs_1.initializeJobApi)(mockJobApi);
            await jobs_1.jobs.getDetail(mockJobId);
            expect(mockJobApi.getDetail).toHaveBeenCalledWith(mockJobId);
        });
        it('uses the configured implementation for getStatus', async () => {
            (0, jobs_1.initializeJobApi)(mockJobApi);
            await jobs_1.jobs.getStatus(mockJobId);
            expect(mockJobApi.getStatus).toHaveBeenCalledWith(mockJobId);
        });
    });
});
//# sourceMappingURL=jobs.test.js.map