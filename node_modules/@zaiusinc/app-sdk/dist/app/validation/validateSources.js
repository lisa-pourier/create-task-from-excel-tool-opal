"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateSources = validateSources;
exports.validateSourceJobs = validateSourceJobs;
const fs = __importStar(require("fs"));
const path_1 = require("path");
const SourceFunction_1 = require("../SourceFunction");
const SourceJob_1 = require("../SourceJob");
const SourceLifecycle_1 = require("../SourceLifecycle");
const SourceSchemaFunction_1 = require("../SourceSchemaFunction");
const SOURCE_FUNCTION_LIFECYCLE_METHODS = [
    'onSourceCreate',
    'onSourceUpdate',
    'onSourceDelete',
    'onSourceEnable',
    'onSourcePause'
];
async function validateSources(runtime) {
    const errors = [];
    // Make sure all the sources listed in the manifest actually exist and are implemented
    if (runtime.manifest.sources) {
        for (const name of Object.keys(runtime.manifest.sources)) {
            errors.push(...(await validateFunction(runtime, name)));
            errors.push(...(await validateSchema(runtime, name)));
            errors.push(...(await validateLifecycle(runtime, name)));
            errors.push(...(await validateSourceJobs(runtime, name)));
        }
    }
    return errors;
}
async function validateSchema(runtime, name) {
    const errors = [];
    const source = runtime.manifest.sources?.[name];
    if (!source || !source.schema) {
        errors.push(`Source is missing the schema property: ${name}`);
    }
    else {
        const schema = source.schema;
        if (typeof schema !== 'object') {
            const schemaFilePath = (0, path_1.join)(runtime.baseDir, 'sources', 'schema', schema);
            if (typeof schema !== 'string') {
                errors.push(`Source schema property must be a string or an object: ${name}`);
            }
            else if (schema.trim() === '') {
                errors.push(`Source schema property cannot be empty: ${name}`);
            }
            else if (!(fs.existsSync(schemaFilePath + '.yml') || fs.existsSync(schemaFilePath + '.yaml'))) {
                errors.push(`File not found for Source schema ${schema}`);
            }
        }
        else if (schema.entry_point) {
            let sourceSchemaFunction = null;
            try {
                sourceSchemaFunction = await runtime.getSourceSchemaFunctionClass(name);
            }
            catch (e) {
                errors.push(`Error loading SourceSchemaFunction entry point ${schema.entry_point}. ${e}`);
            }
            if (sourceSchemaFunction) {
                if (!(sourceSchemaFunction.prototype instanceof SourceSchemaFunction_1.SourceSchemaFunction)) {
                    errors.push('SourceSchemaFunction entry point does not extend App.SourceSchemaFunction: ' + `${schema.entry_point}`);
                }
                else if (typeof sourceSchemaFunction.prototype['getSourcesSchema'] !== 'function') {
                    errors.push('SourceSchemaFunction entry point is missing the getSourcesSchema method: ' + `${schema.entry_point}`);
                }
            }
        }
    }
    return errors;
}
async function validateLifecycle(runtime, name) {
    const errors = [];
    const source = runtime.manifest.sources?.[name];
    if (!source?.lifecycle) {
        return errors;
    }
    let lifecycleClass = null;
    let errorMessage = null;
    try {
        lifecycleClass = await runtime.getSourceLifecycleClass(name);
    }
    catch (e) {
        errorMessage = e;
    }
    if (!source || errorMessage) {
        errors.push(`Error loading SourceLifecycle entry point ${name}. ${errorMessage}`);
    }
    else if (lifecycleClass) {
        if (!(lifecycleClass.prototype instanceof SourceLifecycle_1.SourceLifecycle)) {
            errors.push(`SourceLifecycle entry point does not extend App.SourceLifecycle: ${source.lifecycle?.entry_point}`);
        }
        else {
            for (const method of SOURCE_FUNCTION_LIFECYCLE_METHODS) {
                if (typeof lifecycleClass.prototype[method] !== 'function') {
                    errors.push(`SourceLifecycle entry point is missing the ${method} method: ${source.lifecycle?.entry_point}`);
                }
            }
        }
    }
    return errors;
}
async function validateFunction(runtime, name) {
    const source = runtime.manifest.sources?.[name];
    if (!source?.function) {
        return [];
    }
    const errors = [];
    let sourceClass = null;
    let errorMessage = null;
    try {
        sourceClass = await runtime.getSourceFunctionClass(name);
    }
    catch (e) {
        errorMessage = e;
    }
    if (!source || !sourceClass) {
        errors.push(`Error loading SourceFunction entry point ${name}. ${errorMessage}`);
    }
    else if (!(sourceClass.prototype instanceof SourceFunction_1.SourceFunction)) {
        errors.push(`SourceFunction entry point does not extend App.SourceFunction: ${source.function?.entry_point}`);
    }
    else if (typeof sourceClass.prototype['perform'] !== 'function') {
        errors.push(`SourceFunction entry point is missing the perform method: ${source.function?.entry_point}`);
    }
    return errors;
}
async function validateSourceJobs(runtime, sourceName) {
    const errors = [];
    const source = runtime.manifest.sources?.[sourceName];
    // Make sure all the source jobs listed in the manifest actually exist and are implemented
    if (source && source.jobs) {
        for (const name of Object.keys(source.jobs)) {
            let sourceJobClass = null;
            let errorMessage = null;
            try {
                sourceJobClass = await runtime.getSourceJobClass(sourceName, name);
            }
            catch (e) {
                errorMessage = e;
            }
            if (!sourceJobClass) {
                errors.push(`Error loading job entry point ${name}. ${errorMessage}`);
            }
            else if (!(sourceJobClass.prototype instanceof SourceJob_1.SourceJob)) {
                errors.push(`SourceJob entry point does not extend App.SourceJob: ${source.jobs[name].entry_point}`);
            }
            else {
                if (typeof sourceJobClass.prototype.prepare !== 'function') {
                    errors.push(`SourceJob entry point is missing the prepare method: ${source.jobs[name].entry_point}`);
                }
                if (typeof sourceJobClass.prototype.perform !== 'function') {
                    errors.push(`SourceJob entry point is missing the perform method: ${source.jobs[name].entry_point}`);
                }
            }
        }
    }
    return errors;
}
//# sourceMappingURL=validateSources.js.map