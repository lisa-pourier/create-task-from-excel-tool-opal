"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateMeta = validateMeta;
const EmailValidator = __importStar(require("email-validator"));
const Rivendell_1 = require("../../util/Rivendell");
const types_1 = require("../types");
async function validateMeta(runtime) {
    const errors = [];
    const { app_id, display_name, version, vendor, support_url, contact_email, summary, categories, availability } = runtime.manifest.meta;
    // App ID, version, vendor, support url, and contact email must be in the correct format
    if (!app_id.match(types_1.APP_ID_FORMAT)) {
        errors.push('Invalid app.yml: meta.app_id must start with a letter, contain only lowercase alpha-numeric and underscore, ' +
            `and be between 3 and 32 characters long (${types_1.APP_ID_FORMAT.toString()})`);
    }
    if (!version.match(types_1.VERSION_FORMAT)) {
        errors.push('Invalid app.yml: meta.version must be a semantic version number, optionally with -dev/-beta (and increment) ' +
            `or -private (${types_1.VERSION_FORMAT.toString()})`);
    }
    if (!vendor.match(types_1.VENDOR_FORMAT)) {
        errors.push(`Invalid app.yml: meta.vendor must be lower snake case (${types_1.VENDOR_FORMAT.toString()})`);
    }
    if (!isValidUrl(support_url)) {
        errors.push('Invalid app.yml: meta.support_url must be a valid web address');
    }
    if (!EmailValidator.validate(contact_email)) {
        errors.push('Invalid app.yml: meta.contact_email must be a valid email address');
    }
    // Display name and summary must not be blank
    if (!(display_name && display_name.trim())) {
        errors.push('Invalid app.yml: meta.display_name must not be blank');
    }
    if (!(summary && summary.trim())) {
        errors.push('Invalid app.yml: meta.summary must not be blank');
    }
    // Make sure there are exactly 1 to 2 categories listed
    if (categories.length > 2 || categories.length < 1) {
        errors.push('Invalid app.yml: meta.categories must contain 1 or 2 categories');
    }
    if (categories.length === 2 && categories[0] === categories[1]) {
        errors.push('Invalid app.yml: meta.categories contains two identical categories');
    }
    // Validate meta.availability
    if (availability && !availability.length) {
        errors.push('Invalid app.yml: meta.availability must contain at least one availability zone');
    }
    else if (availability) {
        if (availability.includes('all') && availability.length > 1) {
            errors.push('Invalid app.yml: meta.availability should not contain any other availability zones ' +
                'if it contains "all" availability zones');
        }
        if (!availability.includes('all')) {
            const shards = await Rivendell_1.Rivendell.shards();
            const invalid = availability.filter((zone) => !shards.includes(zone));
            if (invalid.length) {
                errors.push('Invalid app.yml: meta.availability should only contain ' +
                    `valid availability zones (${shards.toString()}) found: ${invalid.toString()}`);
            }
        }
    }
    return errors;
}
function isValidUrl(url) {
    try {
        new URL(url);
    }
    catch (_) {
        return false;
    }
    return url.startsWith('https://');
}
//# sourceMappingURL=validateMeta.js.map