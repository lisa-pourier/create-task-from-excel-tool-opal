"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateApp = validateApp;
const ajv_1 = __importDefault(require("ajv"));
const manifestSchema = __importStar(require("../types/AppManifest.schema.json"));
const destinationSchema = __importStar(require("../types/DestinationSchema.schema.json"));
const schemaObjectSchema = __importStar(require("../types/SchemaObject.schema.json"));
const sourceSchema = __importStar(require("../types/SourceSchema.schema.json"));
const validateAssets_1 = require("./validateAssets");
const validateChannel_1 = require("./validateChannel");
const validateDestinations_1 = require("./validateDestinations");
const validateDestinationsSchema_1 = require("./validateDestinationsSchema");
const validateEnvironment_1 = require("./validateEnvironment");
const validateFunctions_1 = require("./validateFunctions");
const validateJobs_1 = require("./validateJobs");
const validateLifecycle_1 = require("./validateLifecycle");
const validateLiquidExtensions_1 = require("./validateLiquidExtensions");
const validateMeta_1 = require("./validateMeta");
const validateOutboundDomains_1 = require("./validateOutboundDomains");
const validateSchemaObject_1 = require("./validateSchemaObject");
const validateSources_1 = require("./validateSources");
const validateSourcesSchema_1 = require("./validateSourcesSchema");
/**
 * Validates that all of the required pieces of the app are accounted for.
 *
 * @return array of error messages, if there were any, otherwise an empty array
 */
async function validateApp(runtime, baseObjectNames) {
    let errors = [];
    const ajv = new ajv_1.default({ allErrors: true, allowUnionTypes: true });
    if (!ajv.validate(manifestSchema, runtime.manifest)) {
        ajv.errors?.forEach((e) => errors.push(formatAjvError('app.yml', e)));
    }
    else {
        errors = errors
            .concat(await (0, validateMeta_1.validateMeta)(runtime))
            .concat((0, validateEnvironment_1.validateEnvironment)(runtime))
            .concat(await (0, validateFunctions_1.validateFunctions)(runtime))
            .concat(await (0, validateJobs_1.validateJobs)(runtime))
            .concat(await (0, validateDestinations_1.validateDestinations)(runtime))
            .concat(await (0, validateSources_1.validateSources)(runtime))
            .concat(await (0, validateLiquidExtensions_1.validateLiquidExtensions)(runtime))
            .concat(await (0, validateLifecycle_1.validateLifecycle)(runtime))
            .concat(await (0, validateChannel_1.validateChannel)(runtime))
            .concat(await (0, validateAssets_1.validateAssets)(runtime))
            .concat((0, validateOutboundDomains_1.validateOutboundDomains)(runtime));
    }
    if (runtime.manifest.destinations) {
        const destinationSchemaObjects = runtime.getDestinationSchema();
        for (const file of Object.keys(destinationSchemaObjects)) {
            const destinationSchemaObject = destinationSchemaObjects[file];
            if (!ajv.validate(destinationSchema, destinationSchemaObject)) {
                ajv.errors?.forEach((e) => errors.push(formatAjvError(file, e)));
            }
            else {
                errors = errors.concat((0, validateDestinationsSchema_1.validateDestinationsSchema)(destinationSchemaObject, file));
            }
        }
    }
    if (runtime.manifest.sources) {
        const sourceSchemaObjects = runtime.getSourceSchema();
        for (const file of Object.keys(sourceSchemaObjects)) {
            const sourceSchemaObject = sourceSchemaObjects[file];
            if (!ajv.validate(sourceSchema, sourceSchemaObject)) {
                ajv.errors?.forEach((e) => errors.push(formatAjvError(file, e)));
            }
            else {
                errors = errors.concat((0, validateSourcesSchema_1.validateSourcesSchema)(sourceSchemaObject, file));
            }
        }
    }
    const schemaObjects = runtime.getSchemaObjects();
    for (const file of Object.keys(schemaObjects)) {
        const schemaObject = schemaObjects[file];
        if (!ajv.validate(schemaObjectSchema, schemaObject)) {
            ajv.errors?.forEach((e) => errors.push(formatAjvError(file, e)));
        }
        else {
            errors = errors.concat((0, validateSchemaObject_1.validateSchemaObject)(runtime, schemaObject, file, baseObjectNames));
        }
    }
    return errors;
}
function formatAjvError(file, e) {
    const adjustedDataPath = e.instancePath.length > 0 ? e.instancePath.substring(1).replace(/\['([^']+)']/, '.$1') + ' ' : '';
    return `Invalid ${file}: ${adjustedDataPath}${e.message?.replace(/\bshould\b/, 'must') ?? ''}`;
}
//# sourceMappingURL=validateApp.js.map