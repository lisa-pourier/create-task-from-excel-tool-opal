"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateSourcesSchema = validateSourcesSchema;
const path = __importStar(require("path"));
const SCHEMA_NAME_FORMAT = /^[a-z][a-z0-9_]{1,61}$/;
function validateSourcesSchema(sourceSchema, file) {
    return new SourceSchemaValidator(sourceSchema, file).validate();
}
class SourceSchemaValidator {
    errors = [];
    sourcesSchema;
    file;
    constructor(sourceSchema, file) {
        this.sourcesSchema = sourceSchema;
        this.file = file;
    }
    validate() {
        if (path.basename(this.file, '.yml') !== this.sourcesSchema.name &&
            path.basename(this.file, '.yaml') !== this.sourcesSchema.name) {
            this.errors.push(`Invalid ${this.file}: name must match file base name`);
        }
        if (!this.sourcesSchema.name) {
            this.errors.push(`Invalid ${this.file}: name must be specified`);
        }
        else {
            this.enforceNameFormat(this.sourcesSchema.name, 'name');
        }
        if (!this.sourcesSchema.display_name || this.sourcesSchema.display_name.trim().length === 0) {
            this.errors.push(`Invalid ${this.file}: display_name must be specified`);
        }
        let hasPrimaryKey = false;
        this.sourcesSchema.fields.forEach((field, index) => {
            this.validateField(field, `fields[${index}]`);
            if (field.primary) {
                hasPrimaryKey = true;
            }
        });
        if (!hasPrimaryKey) {
            this.errors.push(`Invalid ${this.file}: fields must contain one primary key`);
        }
        if (this.sourcesSchema.custom_types) {
            this.sourcesSchema.custom_types.forEach((customType, index) => {
                this.validateCustomType(customType, index);
            });
        }
        return this.errors;
    }
    enforceNameFormat(name, ref) {
        if (!name.match(SCHEMA_NAME_FORMAT)) {
            this.errors.push(`Invalid ${this.file}: ${ref} must start with a letter, contain only lowercase alpha-numeric and ` +
                `underscore, and be between 2 and 64 characters long (${SCHEMA_NAME_FORMAT.toString()})`);
        }
    }
    validateField(field, pathPrefix) {
        if (!field.name) {
            this.errors.push(`Invalid ${this.file}: ${pathPrefix}.name must be specified`);
        }
        else {
            this.enforceNameFormat(field.name, `${pathPrefix}.name`);
        }
        if (!field.display_name || field.display_name.trim().length === 0) {
            this.errors.push(`Invalid ${this.file}: ${pathPrefix}.display_name must be specified`);
        }
        if (!field.description || field.description.trim().length === 0) {
            this.errors.push(`Invalid ${this.file}: ${pathPrefix}.description must be specified`);
        }
        this.validateCustomTypeReference(field, pathPrefix);
    }
    validateCustomType(customType, customTypeIndex) {
        const pathPrefix = `custom_types[${customTypeIndex}]`;
        if (!customType.name) {
            this.errors.push(`Invalid ${this.file}: ${pathPrefix}.name must be specified`);
        }
        else {
            this.enforceNameFormat(customType.name, `${pathPrefix}.name`);
        }
        if (!customType.display_name || customType.display_name.trim().length === 0) {
            this.errors.push(`Invalid ${this.file}: ${pathPrefix}.display_name must be specified`);
        }
        if (!customType.description || customType.description.trim().length === 0) {
            this.errors.push(`Invalid ${this.file}: ${pathPrefix}.description must be specified`);
        }
        if (customType.fields && Array.isArray(customType.fields)) {
            customType.fields.forEach((field, fieldIndex) => {
                this.validateField(field, `${pathPrefix}.fields[${fieldIndex}]`);
            });
        }
    }
    validateCustomTypeReference(field, pathPrefix) {
        const customTypes = (this.sourcesSchema.custom_types || []).map((ct) => ct.name);
        const customTypeMatch = field.type.match(/^\w+$/);
        if (customTypeMatch && !['boolean', 'float', 'int', 'long', 'string'].includes(field.type)) {
            if (!customTypes.includes(field.type)) {
                this.errors.push(`Invalid ${this.file}: ${pathPrefix}.type '${field.type}' does not match any custom_types name`);
            }
        }
        const arrayTypeMatch = field.type.match(/^\[(\w+)\]$/);
        if (arrayTypeMatch) {
            const arrayType = arrayTypeMatch[1];
            if (!['boolean', 'float', 'int', 'long', 'string'].includes(arrayType) && !customTypes.includes(arrayType)) {
                this.errors.push(`Invalid ${this.file}: ${pathPrefix}.type '${field.type}' array type does not match any custom_types name`);
            }
        }
    }
}
//# sourceMappingURL=validateSourcesSchema.js.map