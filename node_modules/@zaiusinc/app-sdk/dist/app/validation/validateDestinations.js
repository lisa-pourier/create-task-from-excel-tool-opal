"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateDestinations = validateDestinations;
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const Destination_1 = require("../Destination");
const DestinationSchemaFunction_1 = require("../DestinationSchemaFunction");
async function validateDestinations(runtime) {
    const errors = [];
    // Make sure all the destinations listed in the manifest actually exist and are implemented
    if (runtime.manifest.destinations) {
        for (const name of Object.keys(runtime.manifest.destinations)) {
            let destinationClass = null;
            let errorMessage = null;
            try {
                destinationClass = await runtime.getDestinationClass(name);
            }
            catch (e) {
                errorMessage = e;
            }
            if (!destinationClass) {
                errors.push(`Error loading entry point ${name}. ${errorMessage}`);
            }
            else if (!(destinationClass.prototype instanceof Destination_1.Destination)) {
                errors.push(`Destination entry point does not extend App.Destination: ${runtime.manifest.destinations[name].entry_point}`);
            }
            else {
                if (typeof destinationClass.prototype.ready !== 'function') {
                    errors.push(`Destination entry point is missing the prepare method: ${runtime.manifest.destinations[name].entry_point}`);
                }
                if (typeof destinationClass.prototype.deliver !== 'function') {
                    errors.push(`Destination entry point is missing the perform method: ${runtime.manifest.destinations[name].entry_point}`);
                }
            }
            const schema = runtime.manifest.destinations[name].schema;
            if (!schema) {
                errors.push(`Destination is missing the schema property: ${name}`);
            }
            else {
                if (typeof schema !== 'object') {
                    const schemaFilePath = (0, path_1.join)(runtime.baseDir, 'destinations', 'schema', schema);
                    if (typeof schema !== 'string') {
                        errors.push(`Destination schema property must be a string or an object: ${name}`);
                    }
                    else if (schema.trim() === '') {
                        errors.push(`Destination schema property cannot be empty: ${name}`);
                    }
                    else if (!(fs_1.default.existsSync(schemaFilePath + '.yml') || fs_1.default.existsSync(schemaFilePath + '.yaml'))) {
                        errors.push(`File not found for Destination schema ${schema}`);
                    }
                }
                else if (schema.entry_point) {
                    let destinationSchemaFunction = null;
                    try {
                        destinationSchemaFunction = await runtime.getDestinationSchemaFunctionClass(name);
                    }
                    catch (e) {
                        errors.push(`Error loading DestinationSchemaFunction entry point ${schema.entry_point}. ${e}`);
                    }
                    if (destinationSchemaFunction) {
                        if (!(destinationSchemaFunction.prototype instanceof DestinationSchemaFunction_1.DestinationSchemaFunction)) {
                            errors.push('DestinationSchemaFunction entry point does not extend App.DestinationSchemaFunction: ' +
                                `${schema.entry_point}`);
                        }
                        else if (typeof destinationSchemaFunction.prototype['getDestinationsSchema'] !== 'function') {
                            errors.push('DestinationSchemaFunction entry point is missing the getDestinationsSchema method: ' +
                                `${schema.entry_point}`);
                        }
                    }
                }
            }
        }
    }
    return errors;
}
//# sourceMappingURL=validateDestinations.js.map