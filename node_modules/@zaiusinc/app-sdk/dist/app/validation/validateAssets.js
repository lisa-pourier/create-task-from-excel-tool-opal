"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateAssets = validateAssets;
const validateForm_1 = require("@zaiusinc/app-forms-schema/dist/validation/validateForm");
const fs_1 = __importDefault(require("fs"));
const glob = __importStar(require("glob"));
const jsYaml = __importStar(require("js-yaml"));
const path = __importStar(require("path"));
const remark_1 = __importDefault(require("remark"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const remark_validate_links_1 = __importDefault(require("remark-validate-links"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const vfile = __importStar(require("to-vfile"));
const logging_1 = require("../../logging");
const STANDARD_ASSETS = ['assets/directory/overview.md', 'assets/icon.svg', 'assets/logo.svg', 'forms/settings.yml'];
const CHANNEL_FORMS = ['forms/content-settings.yml', 'forms/content-template.yml'];
async function validateAssets(runtime) {
    return new AssetValidator(path.resolve(runtime.baseDir, '../'), runtime.manifest).validate();
}
class AssetValidator {
    baseDir;
    manifest;
    errors = [];
    constructor(baseDir, manifest) {
        this.baseDir = baseDir;
        this.manifest = manifest;
    }
    async validate() {
        this.validateAllAssetsExist();
        await this.validateMarkdownFiles();
        await this.validateForms();
        return this.errors;
    }
    validateAllAssetsExist() {
        let requiredAssets = STANDARD_ASSETS;
        if (this.manifest.channel) {
            requiredAssets = STANDARD_ASSETS.concat(CHANNEL_FORMS);
        }
        requiredAssets.forEach((asset) => {
            if (!fs_1.default.existsSync(`${this.baseDir}/${asset}`)) {
                this.errors.push(`Required file ${asset} is missing.`);
            }
        });
    }
    async validateMarkdownFiles() {
        try {
            const vfiles = await Promise.all(glob
                .sync(`${this.baseDir}/assets/**/*.md`)
                // eslint-disable-next-line @typescript-eslint/no-unsafe-call
                .map((file) => (0, remark_1.default)().use(remark_validate_links_1.default, { repository: false }).process(vfile.readSync(file))));
            vfiles.forEach((file) => {
                file.messages.forEach((msg) => {
                    this.errors.push(`${msg.message} in ${msg.name.replace(`${this.baseDir}/`, '')}.`);
                });
            });
        }
        catch (e) {
            logging_1.logger.error(e);
            this.errors.push('Failed to validate markdown files');
        }
    }
    async validateForms() {
        let files = ['forms/settings.yml'];
        if (this.manifest.channel) {
            files = files.concat(CHANNEL_FORMS);
        }
        for (const file of files) {
            const filePath = path.join(this.baseDir, file);
            if (fs_1.default.existsSync(filePath)) {
                (await (0, validateForm_1.validateFormDefinition)(jsYaml.load(fs_1.default.readFileSync(filePath, 'utf8')))).forEach((message) => this.errors.push(`Invalid ${file}: ${message}`));
            }
        }
    }
}
//# sourceMappingURL=validateAssets.js.map