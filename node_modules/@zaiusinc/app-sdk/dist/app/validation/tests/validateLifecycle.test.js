"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable max-classes-per-file */
const deep_freeze_1 = __importDefault(require("deep-freeze"));
require("jest");
const Lifecycle_1 = require("../../Lifecycle");
const Runtime_1 = require("../../Runtime");
const lib_1 = require("../../lib");
const AuthorizationGrantResult_1 = require("../../lib/AuthorizationGrantResult");
const validateLifecycle_1 = require("../validateLifecycle");
const appManifest = (0, deep_freeze_1.default)({
    meta: {
        app_id: 'my_app',
        display_name: 'My App',
        version: '1.0.0',
        vendor: 'zaius',
        support_url: 'https://zaius.com',
        summary: 'This is an interesting app',
        contact_email: 'support@zaius.com',
        categories: ['Commerce Platform'],
        availability: ['all']
    },
    runtime: 'node12',
    functions: {
        foo: {
            entry_point: 'Foo',
            description: 'gets foo'
        }
    },
    jobs: {
        bar: {
            entry_point: 'Bar',
            description: 'Does a thing'
        }
    }
});
class NonExtendedLifecycle {
}
class PartialLifecycle extends Lifecycle_1.Lifecycle {
    constructor() {
        super();
    }
}
class ProperLifecycle extends Lifecycle_1.Lifecycle {
    constructor() {
        super();
    }
    async onInstall() {
        return { success: true };
    }
    async onSettingsForm(_page, _action, _formData) {
        return new lib_1.LifecycleSettingsResult();
    }
    async onUpgrade(_fromVersion) {
        return { success: true };
    }
    async onFinalizeUpgrade(_fromVersion) {
        return { success: true };
    }
    async onUninstall() {
        return { success: true };
    }
    async onAuthorizationRequest(_page, _formData) {
        return new lib_1.LifecycleSettingsResult();
    }
    async onAuthorizationGrant(_request) {
        return new AuthorizationGrantResult_1.AuthorizationGrantResult('oauth');
    }
}
describe('validateLifecycle', () => {
    it('succeeds with a proper definition', async () => {
        const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({ appManifest, dirName: '/tmp/foo' }));
        const getLifecycleClass = jest.spyOn(Runtime_1.Runtime.prototype, 'getLifecycleClass').mockResolvedValue(ProperLifecycle);
        const errors = await (0, validateLifecycle_1.validateLifecycle)(runtime);
        expect(getLifecycleClass).toHaveBeenCalled();
        expect(errors).toEqual([]);
        getLifecycleClass.mockRestore();
    });
    it('detects missing lifecycle implementation', async () => {
        const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({ appManifest, dirName: '/tmp/foo' }));
        const getLifecycleClass = jest
            .spyOn(Runtime_1.Runtime.prototype, 'getLifecycleClass')
            .mockRejectedValue(new Error('not found'));
        expect(await (0, validateLifecycle_1.validateLifecycle)(runtime)).toEqual(['Error loading Lifecycle implementation. Error: not found']);
        getLifecycleClass.mockRestore();
    });
    it('detects non-extended lifecycle implementation', async () => {
        const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({ appManifest, dirName: '/tmp/foo' }));
        const getLifecycleClass = jest
            .spyOn(Runtime_1.Runtime.prototype, 'getLifecycleClass')
            .mockResolvedValue(NonExtendedLifecycle);
        expect(await (0, validateLifecycle_1.validateLifecycle)(runtime)).toEqual(['Lifecycle implementation does not extend App.Lifecycle']);
        getLifecycleClass.mockRestore();
    });
    it('detects partial lifecycle implementation', async () => {
        const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({ appManifest, dirName: '/tmp/foo' }));
        const getLifecycleClass = jest
            .spyOn(Runtime_1.Runtime.prototype, 'getLifecycleClass')
            .mockResolvedValue(PartialLifecycle);
        expect(await (0, validateLifecycle_1.validateLifecycle)(runtime)).toEqual([
            'Lifecycle implementation is missing the onInstall method',
            'Lifecycle implementation is missing the onSettingsForm method',
            'Lifecycle implementation is missing the onUpgrade method',
            'Lifecycle implementation is missing the onFinalizeUpgrade method',
            'Lifecycle implementation is missing the onUninstall method',
            'Lifecycle implementation is missing the onAuthorizationRequest method',
            'Lifecycle implementation is missing the onAuthorizationGrant method'
        ]);
        getLifecycleClass.mockRestore();
    });
});
//# sourceMappingURL=validateLifecycle.test.js.map