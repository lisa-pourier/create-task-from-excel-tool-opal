"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deep_freeze_1 = __importDefault(require("deep-freeze"));
const mock_fs_1 = __importDefault(require("mock-fs"));
const Runtime_1 = require("../../Runtime");
const validateAssets_1 = require("../validateAssets");
const appManifest = (0, deep_freeze_1.default)({
    meta: {
        app_id: 'my_app',
        display_name: 'My App',
        version: '1.0.0',
        vendor: 'zaius',
        support_url: 'https://zaius.com',
        summary: 'This is an interesting app',
        contact_email: 'support@zaius.com',
        categories: ['Commerce Platform'],
        availability: ['all']
    },
    runtime: 'node12',
    functions: {
        foo: {
            entry_point: 'Foo',
            description: 'gets foo'
        }
    }
});
const formContent = `
sections:
  - key: stuff
    label: Stuff
    elements:
      - key: junk
        label: Junk
        help: Some junk
        type: text
`;
function appDir() {
    return {
        'path/to/app/dir': {
            dist: {},
            assets: {
                directory: {
                    'overview.md': '## Overview'
                },
                'icon.svg': '0110',
                'logo.svg': '0101'
            },
            forms: {
                'settings.yml': formContent
            }
        }
    };
}
const channelAppManifest = (0, deep_freeze_1.default)({
    ...appManifest,
    meta: {
        ...appManifest.meta,
        categories: ['Channel']
    },
    channel: {
        type: 'sms',
        targeting: 'dynamic'
    }
});
function channelAppDir() {
    const base = appDir();
    return {
        'path/to/app/dir': {
            ...base['path/to/app/dir'],
            forms: {
                ...base['path/to/app/dir'].forms,
                'content-settings.yml': formContent,
                'content-template.yml': formContent
            }
        }
    };
}
async function expectError(error, manifest) {
    const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({
        appManifest: manifest || appManifest,
        dirName: 'path/to/app/dir/dist'
    }));
    expect(await (0, validateAssets_1.validateAssets)(runtime)).toEqual(error instanceof Array ? error : [error]);
}
describe('validateAssets', () => {
    afterEach(() => {
        mock_fs_1.default.restore();
    });
    it('succeeds when all required assets are available', async () => {
        const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({ appManifest, dirName: 'path/to/app/dir/dist' }));
        (0, mock_fs_1.default)(appDir());
        expect(await (0, validateAssets_1.validateAssets)(runtime)).toEqual([]);
    });
    it('fails when assets/directory/overview.md does not exist', async () => {
        const missingAssets = appDir();
        delete missingAssets['path/to/app/dir']['assets']['directory']['overview.md'];
        (0, mock_fs_1.default)(missingAssets);
        await expectError('Required file assets/directory/overview.md is missing.');
    });
    it('fails when forms/settings.yml does not exist', async () => {
        const missingAssets = appDir();
        delete missingAssets['path/to/app/dir']['forms']['settings.yml'];
        (0, mock_fs_1.default)(missingAssets);
        await expectError('Required file forms/settings.yml is missing.');
    });
    it('fails when assets/icon.svg does not exist', async () => {
        const missingAssets = appDir();
        delete missingAssets['path/to/app/dir']['assets']['icon.svg'];
        (0, mock_fs_1.default)(missingAssets);
        await expectError('Required file assets/icon.svg is missing.');
    });
    it('fails when assets/logo.svg does not exist', async () => {
        const missingAssets = appDir();
        delete missingAssets['path/to/app/dir']['assets']['logo.svg'];
        (0, mock_fs_1.default)(missingAssets);
        await expectError('Required file assets/logo.svg is missing.');
    });
    it('fails when markdown files contain links to unknown headers', async () => {
        const missingHeaderLinks = appDir();
        missingHeaderLinks['path/to/app/dir']['assets']['directory']['overview.md'] = '[dne](#dne).';
        (0, mock_fs_1.default)(missingHeaderLinks);
        await expectError('Link to unknown heading: `dne` in assets/directory/overview.md:1:1-1:12.');
    });
    it('fails when markdown files contain links to unknown files', async () => {
        const missingFileLinks = appDir();
        missingFileLinks['path/to/app/dir']['assets']['directory']['overview.md'] = '[missing](missing.js)';
        (0, mock_fs_1.default)(missingFileLinks);
        await expectError('Link to unknown file: `missing.js` in assets/directory/overview.md:1:1-1:22.');
    });
    it('detects schema errors in forms/settings.yml', async () => {
        const badForm = appDir();
        badForm['path/to/app/dir']['forms']['settings.yml'] = 'something: wrong';
        (0, mock_fs_1.default)(badForm);
        await expectError([
            "Invalid forms/settings.yml: must have required property 'sections'",
            'Invalid forms/settings.yml: must NOT have additional properties'
        ]);
    });
    describe('channel app', () => {
        it('succeeds when all required assets are available', async () => {
            const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({
                appManifest: channelAppManifest,
                dirName: 'path/to/app/dir/dist'
            }));
            (0, mock_fs_1.default)(channelAppDir());
            expect(await (0, validateAssets_1.validateAssets)(runtime)).toEqual([]);
        });
        it('fails when content forms do not exist', async () => {
            const missingAssets = channelAppDir();
            delete missingAssets['path/to/app/dir']['forms']['content-settings.yml'];
            delete missingAssets['path/to/app/dir']['forms']['content-template.yml'];
            (0, mock_fs_1.default)(missingAssets);
            await expectError([
                'Required file forms/content-settings.yml is missing.',
                'Required file forms/content-template.yml is missing.'
            ], channelAppManifest);
        });
        it('detects schema errors in content forms', async () => {
            const badForms = channelAppDir();
            badForms['path/to/app/dir']['forms']['content-settings.yml'] = 'something: wrong';
            badForms['path/to/app/dir']['forms']['content-template.yml'] = 'sections:\n  - elements:\n    - type: text';
            (0, mock_fs_1.default)(badForms);
            await expectError([
                "Invalid forms/content-settings.yml: must have required property 'sections'",
                'Invalid forms/content-settings.yml: must NOT have additional properties',
                "Invalid forms/content-template.yml: sections[0] must have required property 'key'",
                "Invalid forms/content-template.yml: sections[0] must have required property 'label'",
                "Invalid forms/content-template.yml: sections[0].elements[0] must have required property 'help'",
                "Invalid forms/content-template.yml: sections[0].elements[0] must have required property 'key'",
                "Invalid forms/content-template.yml: sections[0].elements[0] must have required property 'label'"
            ], channelAppManifest);
        });
    });
});
//# sourceMappingURL=validateAssets.test.js.map