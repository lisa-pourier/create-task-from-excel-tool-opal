"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deep_freeze_1 = __importDefault(require("deep-freeze"));
require("jest");
const jsYaml = __importStar(require("js-yaml"));
const mock_fs_1 = __importDefault(require("mock-fs"));
const Runtime_1 = require("../../Runtime");
const validateApp_1 = require("../validateApp");
const validateAssets_1 = require("../validateAssets");
const validateChannel_1 = require("../validateChannel");
const validateDestinations_1 = require("../validateDestinations");
const validateEnvironment_1 = require("../validateEnvironment");
const validateFunctions_1 = require("../validateFunctions");
const validateJobs_1 = require("../validateJobs");
const validateLifecycle_1 = require("../validateLifecycle");
const validateLiquidExtensions_1 = require("../validateLiquidExtensions");
const validateMeta_1 = require("../validateMeta");
const validateSchemaObject_1 = require("../validateSchemaObject");
const validateSources_1 = require("../validateSources");
jest.mock('../validateMeta');
jest.mock('../validateEnvironment');
jest.mock('../validateFunctions');
jest.mock('../validateJobs');
jest.mock('../validateLiquidExtensions');
jest.mock('../validateLifecycle');
jest.mock('../validateChannel');
jest.mock('../validateSchemaObject');
jest.mock('../validateAssets');
jest.mock('../validateDestinations');
jest.mock('../validateSources');
const appManifest = (0, deep_freeze_1.default)({
    meta: {
        app_id: 'my_app',
        display_name: 'My App',
        version: '1.0.0',
        vendor: 'zaius',
        support_url: 'https://zaius.com',
        summary: 'This is an interesting app',
        contact_email: 'support@zaius.com',
        categories: ['Commerce Platform'],
        availability: ['all']
    },
    runtime: 'node18',
    environment: ['APP_ENV_FOO'],
    functions: {
        foo: {
            entry_point: 'Foo',
            description: 'gets foo'
        }
    },
    jobs: {
        bar: {
            entry_point: 'Bar',
            description: 'Does a thing'
        }
    },
    destinations: {
        foo_destination: {
            entry_point: 'FooDestination',
            description: 'Basic Destination',
            schema: 'asset'
        }
    },
    sources: {
        foo_source: {
            description: 'Foo Description',
            schema: 'asset',
            function: {
                entry_point: 'FooSource'
            }
        }
    },
    outbound_domains: ['foo.zaius.com']
});
const schemaObjects = (0, deep_freeze_1.default)({
    'schema/events.yml': {
        name: 'events',
        fields: [
            {
                name: 'my_app_coupon_id',
                type: 'string',
                display_name: 'My App Coupon ID',
                description: 'The coupon associated with this event'
            }
        ],
        relations: [
            {
                name: 'my_app_coupon',
                display_name: 'My App Coupon',
                child_object: 'my_app_coupons',
                join_fields: [
                    {
                        parent: 'my_app_coupon_id',
                        child: 'coupon_id'
                    }
                ]
            }
        ]
    },
    'schema/my_app_coupons.yml': {
        name: 'my_app_coupons',
        display_name: 'My App Coupons',
        fields: [
            {
                name: 'coupon_id',
                type: 'string',
                display_name: 'Coupon ID',
                description: 'The Coupon ID',
                primary: true
            },
            {
                name: 'percent_off',
                type: 'number',
                display_name: 'Percent Off',
                description: 'Percentage discount'
            }
        ]
    },
    'destinations/schema/asset.yml': {
        name: 'asset',
        display_name: 'Asset',
        description: 'description',
        fields: [
            {
                name: 'bynder_app_id',
                type: 'string',
                display_name: 'Bynder App Id',
                description: 'Id of the app',
                primary: true
            },
            {
                name: 'category',
                type: 'category',
                display_name: 'Category',
                description: 'Category of the asset'
            }
        ],
        custom_types: [
            {
                name: 'category',
                display_name: 'Category',
                description: 'Category of the asset',
                fields: [
                    {
                        name: 'name',
                        display_name: 'Name',
                        description: 'Name of the category',
                        type: 'string'
                    }
                ]
            }
        ]
    },
    'sources/schema/asset.yml': {
        name: 'asset',
        display_name: 'Asset',
        description: 'description',
        fields: [
            {
                name: 'bynder_app_id',
                type: 'string',
                display_name: 'Bynder App Id',
                description: 'Id of the app',
                primary: true
            },
            {
                name: 'category',
                type: 'category',
                display_name: 'Category',
                description: 'Category of the asset'
            }
        ],
        custom_types: [
            {
                name: 'category',
                display_name: 'Category',
                description: 'Category of the asset',
                fields: [
                    {
                        name: 'name',
                        display_name: 'Name',
                        description: 'Name of the category',
                        type: 'string'
                    }
                ]
            }
        ]
    }
});
describe('validateApp', () => {
    beforeAll(() => {
        (0, mock_fs_1.default)({
            '/tmp/foo': {
                'app.yml': jsYaml.dump(appManifest),
                schema: {
                    'events.yml': jsYaml.dump(schemaObjects['schema/events.yml']),
                    'my_app_coupons.yml': jsYaml.dump(schemaObjects['schema/my_app_coupons.yml']),
                    'something_else.yml.txt': 'something else'
                },
                destinations: {
                    schema: {
                        'asset.yml': jsYaml.dump(schemaObjects['destinations/schema/asset.yml'])
                    }
                },
                sources: {
                    schema: {
                        'asset.yml': jsYaml.dump(schemaObjects['sources/schema/asset.yml'])
                    }
                }
            }
        });
    });
    afterAll(() => {
        mock_fs_1.default.restore();
        jest.restoreAllMocks();
    });
    beforeEach(() => {
        jest.clearAllMocks();
        validateMeta_1.validateMeta.mockReturnValue([]);
        validateEnvironment_1.validateEnvironment.mockReturnValue([]);
        validateFunctions_1.validateFunctions.mockResolvedValue([]);
        validateJobs_1.validateJobs.mockResolvedValue([]);
        validateLiquidExtensions_1.validateLiquidExtensions.mockResolvedValue([]);
        validateLifecycle_1.validateLifecycle.mockResolvedValue([]);
        validateChannel_1.validateChannel.mockResolvedValue([]);
        validateSchemaObject_1.validateSchemaObject.mockReturnValue([]);
        validateAssets_1.validateAssets.mockReturnValue([]);
        validateDestinations_1.validateDestinations.mockReturnValue([]);
        validateSources_1.validateSources.mockReturnValue([]);
    });
    it('succeeds with a proper definition', async () => {
        const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({ appManifest, dirName: '/tmp/foo' }));
        expect(await (0, validateApp_1.validateApp)(runtime)).toEqual([]);
    });
    it('captures json schema errors in the manifest', async () => {
        const manifest = {
            ...appManifest,
            meta: { ...appManifest.meta, categories: ['Rocket Launchers'] },
            runtime: 'node10',
            functions: { foo: { ...appManifest.functions.foo, entry_point: undefined } }
        };
        const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({ appManifest: manifest, dirName: '/tmp/foo' }));
        expect(await (0, validateApp_1.validateApp)(runtime)).toEqual([
            "Invalid app.yml: functions/foo must have required property 'entry_point'",
            'Invalid app.yml: meta/categories/0 must be equal to one of the allowed values',
            'Invalid app.yml: runtime must be equal to one of the allowed values'
        ]);
    });
    it('captures json schema errors in schema objects', async () => {
        const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({ appManifest, dirName: '/tmp/foo' }));
        const getSchemaObjects = jest.spyOn(runtime, 'getSchemaObjects').mockReturnValue({
            'schema/events.yml': {
                ...schemaObjects['schema/events.yml'],
                name: undefined,
                fields: [{ ...schemaObjects['schema/events.yml'].fields[0], type: 'text', description: undefined }]
            }
        });
        const getDestinationSchema = jest.spyOn(runtime, 'getDestinationSchema').mockReturnValue({
            'destinations/schema/asset.yml': {
                ...schemaObjects['destinations/schema/asset.yml'],
                name: undefined,
                fields: [{ ...schemaObjects['destinations/schema/asset.yml'].fields[0], type: '', display_name: undefined }]
            }
        });
        const getSourceSchema = jest.spyOn(runtime, 'getSourceSchema').mockReturnValue({
            'sources/schema/asset.yml': {
                ...schemaObjects['sources/schema/asset.yml'],
                name: undefined,
                fields: [{ ...schemaObjects['sources/schema/asset.yml'].fields[0], type: '', display_name: undefined }]
            }
        });
        expect(await (0, validateApp_1.validateApp)(runtime)).toEqual([
            "Invalid destinations/schema/asset.yml: must have required property 'name'",
            "Invalid destinations/schema/asset.yml: fields/0 must have required property 'display_name'",
            'Invalid destinations/schema/asset.yml: fields/0/type must match pattern ' +
                '"^(string|integer|boolean|decimal|\\w+|\\[\\w+\\])$"',
            "Invalid sources/schema/asset.yml: must have required property 'name'",
            "Invalid sources/schema/asset.yml: fields/0 must have required property 'display_name'",
            'Invalid sources/schema/asset.yml: fields/0/type must match pattern ' +
                '"^(string|integer|boolean|decimal|\\w+|\\[\\w+\\])$"',
            "Invalid schema/events.yml: must have required property 'name'",
            "Invalid schema/events.yml: fields/0 must have required property 'description'",
            'Invalid schema/events.yml: fields/0/type must be equal to one of the allowed values'
        ]);
        getSchemaObjects.mockRestore();
        getDestinationSchema.mockRestore();
        getSourceSchema.mockRestore();
    });
    it('captures content errors', async () => {
        const runtime = Runtime_1.Runtime.fromJson(JSON.stringify({ appManifest, dirName: '/tmp/foo' }));
        validateMeta_1.validateMeta.mockReturnValue(['meta error 1', 'meta error 2']);
        validateEnvironment_1.validateEnvironment.mockReturnValue(['environment error 1', 'environment error 2']);
        validateFunctions_1.validateFunctions.mockResolvedValue(['functions error 1', 'functions error 2']);
        validateJobs_1.validateJobs.mockResolvedValue(['jobs error 1', 'jobs error 2']);
        validateLiquidExtensions_1.validateLiquidExtensions.mockResolvedValue(['liquid error 1', 'liquid error 2']);
        validateLifecycle_1.validateLifecycle.mockResolvedValue(['lifecycle error 1', 'lifecycle error 2']);
        validateChannel_1.validateChannel.mockResolvedValue(['channel error 1', 'channel error 2']);
        validateDestinations_1.validateDestinations.mockResolvedValue(['destination error 1', 'destination error 2']);
        validateSources_1.validateSources.mockResolvedValue(['source error 1', 'source error 2']);
        let schemaErrorCounter = 1;
        validateSchemaObject_1.validateSchemaObject.mockImplementation(() => [
            `schema error ${schemaErrorCounter++}`,
            `schema error ${schemaErrorCounter++}`
        ]);
        validateAssets_1.validateAssets.mockResolvedValue(['asset error 1', 'asset error 2']);
        expect(await (0, validateApp_1.validateApp)(runtime, ['events', 'customers'])).toEqual([
            'meta error 1',
            'meta error 2',
            'environment error 1',
            'environment error 2',
            'functions error 1',
            'functions error 2',
            'jobs error 1',
            'jobs error 2',
            'destination error 1',
            'destination error 2',
            'source error 1',
            'source error 2',
            'liquid error 1',
            'liquid error 2',
            'lifecycle error 1',
            'lifecycle error 2',
            'channel error 1',
            'channel error 2',
            'asset error 1',
            'asset error 2',
            'schema error 1',
            'schema error 2',
            'schema error 3',
            'schema error 4'
        ]);
        expect(validateMeta_1.validateMeta).toBeCalledWith(runtime);
        expect(validateFunctions_1.validateFunctions).toBeCalledWith(runtime);
        expect(validateJobs_1.validateJobs).toBeCalledWith(runtime);
        expect(validateLiquidExtensions_1.validateLiquidExtensions).toBeCalledWith(runtime);
        expect(validateLifecycle_1.validateLifecycle).toBeCalledWith(runtime);
        expect(validateChannel_1.validateChannel).toBeCalledWith(runtime);
        expect(validateSchemaObject_1.validateSchemaObject.mock.calls).toEqual([
            [runtime, schemaObjects['schema/my_app_coupons.yml'], 'schema/my_app_coupons.yml', ['events', 'customers']],
            [runtime, schemaObjects['schema/events.yml'], 'schema/events.yml', ['events', 'customers']]
        ]);
        expect(validateAssets_1.validateAssets).toBeCalledWith(runtime);
        expect(validateDestinations_1.validateDestinations).toBeCalledWith(runtime);
        expect(validateSources_1.validateSources).toBeCalledWith(runtime);
    });
});
//# sourceMappingURL=validateApp.test.js.map