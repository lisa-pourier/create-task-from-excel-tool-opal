"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateSchemaObject = validateSchemaObject;
const path = __importStar(require("path"));
const SchemaObject_1 = require("../types/SchemaObject");
function validateSchemaObject(runtime, schemaObject, file, baseObjectNames) {
    return new SchemaObjectValidator(runtime, schemaObject, file, baseObjectNames).validate();
}
class SchemaObjectValidator {
    schemaObject;
    file;
    baseObjectNames;
    errors = [];
    appIdPrefix;
    appNamePrefix;
    isCustomObject;
    constructor(runtime, schemaObject, file, baseObjectNames) {
        this.schemaObject = schemaObject;
        this.file = file;
        this.baseObjectNames = baseObjectNames;
        this.appIdPrefix = `${runtime.manifest.meta.app_id}_`;
        this.appNamePrefix = `${runtime.manifest.meta.display_name} `;
        this.isCustomObject = schemaObject.name.startsWith(this.appIdPrefix);
    }
    validate() {
        if (path.basename(this.file, '.yml') !== this.schemaObject.name &&
            path.basename(this.file, '.yaml') !== this.schemaObject.name) {
            this.errors.push(`Invalid ${this.file}: name must match file base name`);
        }
        if (!this.isCustomObject && this.baseObjectNames && !this.baseObjectNames.includes(this.schemaObject.name)) {
            this.errors.push(`Invalid ${this.file}: name must be prefixed with "${this.appIdPrefix}" for custom object`);
            this.isCustomObject = true;
        }
        this.enforceNameFormat(this.schemaObject.name, 'name');
        if (this.isCustomObject) {
            if (!this.schemaObject.display_name || this.schemaObject.display_name.trim().length === 0) {
                this.errors.push(`Invalid ${this.file}: display_name must be specified for custom object`);
            }
            else if (!this.schemaObject.display_name.startsWith(this.appNamePrefix)) {
                this.errors.push(`Invalid ${this.file}: display_name must be prefixed with "${this.appNamePrefix}"`);
            }
            if (this.schemaObject.alias && !this.schemaObject.alias.startsWith(this.appIdPrefix)) {
                this.errors.push(`Invalid ${this.file}: alias must be prefixed with "${this.appIdPrefix}"`);
            }
        }
        else {
            if (this.schemaObject.display_name) {
                this.errors.push(`Invalid ${this.file}: display_name cannot be specified for standard object`);
            }
            if (this.schemaObject.alias) {
                this.errors.push(`Invalid ${this.file}: alias cannot be specified for standard object`);
            }
        }
        let hasPrimaryKey = false;
        if (this.schemaObject.fields) {
            this.schemaObject.fields.forEach((field, index) => {
                this.validateField(field, index);
                if (field.primary) {
                    hasPrimaryKey = true;
                }
            });
        }
        if (this.isCustomObject && !hasPrimaryKey) {
            this.errors.push(`Invalid ${this.file}: fields must contain at least one primary key for custom object`);
        }
        if (this.schemaObject.relations) {
            this.schemaObject.relations.forEach((relation, index) => {
                this.validateRelation(relation, index);
            });
        }
        if (this.schemaObject.identifiers) {
            if (this.schemaObject.name !== 'customers') {
                this.errors.push(`Invalid ${this.file}: identifiers are only allowed on customers`);
            }
            this.schemaObject.identifiers.forEach((identifier, index) => {
                this.validateIdentifier(identifier, index);
            });
        }
        return this.errors;
    }
    enforceNameFormat(name, ref) {
        if (!name.match(SchemaObject_1.SCHEMA_NAME_FORMAT)) {
            this.errors.push(`Invalid ${this.file}: ${ref} must start with a letter, contain only lowercase alpha-numeric and ` +
                `underscore, and be between 2 and 64 characters long (${SchemaObject_1.SCHEMA_NAME_FORMAT.toString()})`);
        }
    }
    validateField(field, index) {
        this.enforceNameFormat(field.name, `fields[${index}].name`);
        if (!field.display_name || field.display_name.trim().length === 0) {
            this.errors.push(`Invalid ${this.file}: fields[${index}].display_name must be specified`);
        }
        if (!field.description || field.description.trim().length === 0) {
            this.errors.push(`Invalid ${this.file}: fields[${index}].description must be specified`);
        }
        if (!this.isCustomObject) {
            if (!field.name.startsWith(this.appIdPrefix)) {
                this.errors.push(`Invalid ${this.file}: fields[${index}].name must be prefixed with "${this.appIdPrefix}"`);
            }
            if (!field.display_name.startsWith(this.appNamePrefix)) {
                this.errors.push(`Invalid ${this.file}: fields[${index}].display_name must be prefixed with "${this.appNamePrefix}"`);
            }
        }
        if (field.primary) {
            if (!this.isCustomObject) {
                this.errors.push(`Invalid ${this.file}: fields[${index}].primary cannot be set for non-custom object`);
            }
            else if (field.type !== 'string') {
                this.errors.push(`Invalid ${this.file}: fields[${index}].type must be string for primary key`);
            }
        }
    }
    validateRelation(relation, index) {
        this.enforceNameFormat(relation.name, `relations[${index}].name`);
        if (!relation.display_name || relation.display_name.trim().length === 0) {
            this.errors.push(`Invalid ${this.file}: relations[${index}].display_name must be specified`);
        }
        if (relation.join_fields.length === 0) {
            this.errors.push(`Invalid ${this.file}: relations[${index}].join_fields must contain at least one join field`);
        }
        if (relation.join_fields.some((joinField) => joinField.parent.startsWith(this.appIdPrefix))) {
            if (!relation.name.startsWith(this.appIdPrefix)) {
                this.errors.push(`Invalid ${this.file}: relations[${index}].name must be prefixed with "${this.appIdPrefix}"`);
            }
            if (!relation.display_name.startsWith(this.appNamePrefix)) {
                this.errors.push(`Invalid ${this.file}: relations[${index}].display_name must be prefixed with "${this.appNamePrefix}"`);
            }
        }
    }
    validateIdentifier(identifier, index) {
        this.enforceNameFormat(identifier.name, `identifiers[${index}].name`);
        if (!identifier.name.startsWith(this.appIdPrefix)) {
            this.errors.push(`Invalid ${this.file}: identifiers[${index}].name must be prefixed with "${this.appIdPrefix}"`);
        }
        if (!identifier.display_name.startsWith(this.appNamePrefix)) {
            this.errors.push(`Invalid ${this.file}: identifiers[${index}].display_name must be prefixed with "${this.appNamePrefix}"`);
        }
        const suffix = Object.keys(IDENTIFIER_SUFFIXES).find((s) => identifier.name.endsWith(s));
        if (!suffix) {
            this.errors.push(`Invalid ${this.file}: identifiers[${index}].name must end with a valid suffix`);
        }
        else if (!identifier.display_name.endsWith(IDENTIFIER_SUFFIXES[suffix])) {
            this.errors.push(`Invalid ${this.file}: identifiers[${index}].display_name must end with "${IDENTIFIER_SUFFIXES[suffix]}" to ` +
                `match name suffix "${suffix}"`);
        }
    }
}
const IDENTIFIER_SUFFIXES = {
    _id: ' ID',
    _hash: ' Hash',
    _number: ' Number',
    _token: ' Token',
    _alias: ' Alias',
    _address: ' Address',
    _key: ' Key'
};
//# sourceMappingURL=validateSchemaObject.js.map