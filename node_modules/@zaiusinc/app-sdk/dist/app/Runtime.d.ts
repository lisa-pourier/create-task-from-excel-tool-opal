import { Source } from '../sources/Source';
import { Channel } from './Channel';
import { Destination } from './Destination';
import { DestinationSchemaFunction, DestinationSchemaFunctionConfig } from './DestinationSchemaFunction';
import { Function } from './Function';
import { Job, JobInvocation } from './Job';
import { Lifecycle } from './Lifecycle';
import { LiquidExtension } from './LiquidExtension';
import { SourceFunction, SourceConfiguration } from './SourceFunction';
import { SourceJob, SourceJobInvocation } from './SourceJob';
import { SourceLifecycle } from './SourceLifecycle';
import { SourceSchemaFunction, SourceSchemaFunctionConfig } from './SourceSchemaFunction';
import { Request } from './lib';
import { AppManifest } from './types';
import { DestinationSchemaObjects } from './types/DestinationSchema';
import { SchemaObjects } from './types/SchemaObject';
import { SourceSchemaObjects } from './types/SourceSchema';
export declare class FunctionClassNotFoundError extends Error {
}
export declare class Runtime {
    /**
     * Initializes from a directory. Used during startup.
     * @param dirName the base directory of the app
     * @param skipJsonValidation for internal use, allows json-schema errors to be captured by the validation process
     */
    static initialize(dirName: string, skipJsonValidation?: boolean): Promise<Runtime>;
    /**
     * Initializes from a pre-validated JSON definition. Used during task execution.
     * @param serializedRuntime JSON-serialized runtime definition
     */
    static fromJson(serializedRuntime: string): Runtime;
    private appManifest;
    private dirName;
    get manifest(): Readonly<AppManifest>;
    get baseDir(): string;
    getFunctionClass<T extends Function>(name: string): Promise<new (request: Request) => T>;
    getLifecycleClass<T extends Lifecycle>(): Promise<new () => T>;
    getChannelClass<T extends Channel>(): Promise<new () => T>;
    getJobClass<T extends Job>(name: string): Promise<new (invocation: JobInvocation) => T>;
    getSourceJobClass<T extends SourceJob>(sourceName: string, jobName: string): Promise<new (invocation: SourceJobInvocation, source: Source) => T>;
    getDestinationClass<T extends Destination<any>>(name: string): Promise<new () => T>;
    getSourceLifecycleClass<T extends SourceLifecycle>(name: string): Promise<(new (config: SourceConfiguration) => T) | null>;
    getDestinationSchemaFunctionClass<T extends DestinationSchemaFunction>(name: string): Promise<new (config: DestinationSchemaFunctionConfig) => T>;
    getSourceSchemaFunctionClass<T extends SourceSchemaFunction>(name: string): Promise<new (config: SourceSchemaFunctionConfig) => T>;
    getSourceFunctionClass<T extends SourceFunction>(name: string): Promise<new (config: SourceConfiguration, request: Request, source: Source) => T>;
    getLiquidExtensionClass<T extends LiquidExtension>(name: string): Promise<new () => T>;
    getSchemaObjects(): SchemaObjects;
    getDestinationSchema(): DestinationSchemaObjects;
    getSourceSchema(): SourceSchemaObjects;
    private getSchema;
    toJson(): string;
    private import;
    private initialize;
}
//# sourceMappingURL=Runtime.d.ts.map