import { SourceConfiguration } from './SourceFunction';
export interface SourceCallbackResponse {
    success: boolean;
    message?: string;
}
export type SourceCreateResponse = SourceCallbackResponse;
export type SourceUpdateResponse = SourceCallbackResponse;
export type SourceDeleteResponse = SourceCallbackResponse;
export type SourceEnableResponse = SourceCallbackResponse;
export type SourcePauseResponse = SourceCallbackResponse;
export declare abstract class SourceLifecycle {
    protected config: SourceConfiguration;
    constructor(config: SourceConfiguration);
    /**
     * Called when a sources is created.
     * Use this method to setup the source webhooks so it is in a state
     * to recieve data.
     */
    abstract onSourceCreate(): Promise<SourceCreateResponse>;
    /**
     * Called when a sources is updated.
     * Use this method to update the source webhooks so it is in a state
     * to recieve data.
     */
    abstract onSourceUpdate(): Promise<SourceUpdateResponse>;
    /**
     * Called when a sources is deleted.
     * Use this method to perform any cleanup tasks.
     */
    abstract onSourceDelete(): Promise<SourceDeleteResponse>;
    /**
     * Called when a sources is enabled.
     */
    abstract onSourceEnable(): Promise<SourceEnableResponse>;
    /**
     * Called when a sources is paused.
     */
    abstract onSourcePause(): Promise<SourcePauseResponse>;
}
//# sourceMappingURL=SourceLifecycle.d.ts.map