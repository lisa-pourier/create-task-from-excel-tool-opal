"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const async_hooks_1 = require("async_hooks");
require("jest");
const AppContext_1 = require("../AppContext");
describe('AppContext', () => {
    function runWithAsyncLocalStore(appContext, code) {
        const ocpContextStorage = new async_hooks_1.AsyncLocalStorage();
        global.ocpContextStorage = ocpContextStorage;
        const context = {
            ocpRuntime: {
                appContext
            }
        };
        ocpContextStorage.run(context, code);
    }
    describe('getAppContext - local storage', () => {
        it('provides the context from OCP runtime from global context', () => {
            runWithAsyncLocalStore({ trackerId: 'foo' }, () => {
                expect((0, AppContext_1.getAppContext)()).toEqual({ trackerId: 'foo' });
            });
        });
    });
    describe('isGlobalContext - local storage', () => {
        it('returns true if the context is for a global request', () => {
            runWithAsyncLocalStore({ trackerId: 'foo', installId: 1 }, () => {
                expect((0, AppContext_1.isGlobalContext)()).toEqual(false);
            });
            runWithAsyncLocalStore({ trackerId: 'foo', installId: -1 }, () => {
                expect((0, AppContext_1.isGlobalContext)()).toEqual(true);
            });
            runWithAsyncLocalStore({ trackerId: 'foo', installId: 0 }, () => {
                expect((0, AppContext_1.isGlobalContext)()).toEqual(true);
            });
        });
    });
    describe('getAppContext - configured in module scope', () => {
        it('provides the previously set context', () => {
            (0, AppContext_1.setContext)({ trackerId: 'foo' });
            expect((0, AppContext_1.getAppContext)()).toEqual({ trackerId: 'foo' });
        });
    });
    describe('isGlobalContext - configured in module scope', () => {
        it('returns true if the context is for a global request', () => {
            (0, AppContext_1.setContext)({ trackerId: 'foo', installId: 1 });
            expect((0, AppContext_1.isGlobalContext)()).toEqual(false);
            (0, AppContext_1.setContext)({ trackerId: 'foo', installId: -1 });
            expect((0, AppContext_1.isGlobalContext)()).toEqual(true);
            (0, AppContext_1.setContext)({ trackerId: 'foo', installId: 0 });
            expect((0, AppContext_1.isGlobalContext)()).toEqual(true);
        });
    });
});
//# sourceMappingURL=AppContext.test.js.map