import { EventData } from '@zaiusinc/node-sdk';
import { CampaignTracking } from '../Channel';
export type CampaignAction = 'sent' | 'delivery' | 'open' | 'click' | 'engage' | 'disengage' | 'soft_bounce' | 'hard_bounce' | 'spam_report';
/**
 * A class to help batch and send campaign related events
 */
export declare class CampaignEvents {
    private identifierField;
    tracking: Partial<CampaignTracking>;
    /**
     * The campaign event type
     */
    private type;
    private reachabilityBatcher;
    private consentBatcher;
    private eventBatcher;
    /**
     * @param tracking Campaign tracking information to be included on every event.
     * Use an empty {} if you plan to provide different tracking info for each event,
     * otherwise a complete CampaignTracking object.
     * @param identifierField the name of the identifier field used to target the user.
     * The identifier value provided to a campaign event must be for this identifier field name.
     */
    constructor(identifierField: string, tracking: Partial<CampaignTracking>, type?: string);
    /**
     * Flush all API batches. You MUST flush before your task exists if you generated any events.
     */
    flush(): Promise<void>;
    /**
     * Send a campaign related event
     * @param identifier the identifier value / target identifier value related to this event
     * @param action the campaign action
     * @param ts the time of the event. If left blank, the recevied time will be used.
     * @param data additional event data to add to the event
     */
    event(identifier: string, action: CampaignAction, ts?: Date | string | number, data?: EventData): Promise<void>;
    /**
     * Send a campaign delivery event
     * @param identifier the identifier value / target identifier value related to this event
     * @param ts the time of the event. If left blank, the recevied time will be used.
     * @param data additional event data to add to the event
     */
    delivery(identifier: string, ts?: Date | string | number, data?: EventData): Promise<void>;
    /**
     * Send a campaign open event
     * @param identifier the identifier value / target identifier value related to this event
     * @param ts the time of the event. If left blank, the recevied time will be used.
     * @param data additional event data to add to the event
     */
    open(identifier: string, ts?: Date | string | number, data?: EventData): Promise<void>;
    /**
     * Send a campaign click event
     * @param identifier the identifier value / target identifier value related to this event
     * @param ts the time of the event. If left blank, the recevied time will be used.
     * @param data additional event data to add to the event
     */
    click(identifier: string, ts?: Date | string | number, data?: EventData): Promise<void>;
    /**
     * Send a campaign engage event
     * @param identifier the identifier value / target identifier value related to this event
     * @param ts the time of the event. If left blank, the recevied time will be used.
     * @param data additional event data to add to the event
     */
    engage(identifier: string, ts?: Date | string | number, data?: EventData): Promise<void>;
    /**
     * Send a campaign disengage event
     * @param identifier the identifier value / target identifier value related to this event
     * @param ts the time of the event. If left blank, the recevied time will be used.
     * @param data additional event data to add to the event
     */
    disengage(identifier: string, ts?: Date | string | number, data?: EventData): Promise<void>;
    /**
     * Send a campaign hard bounce event, which means you were unable to deliver AND
     * the identifier is definitely no longer reachable. E.g., an invalid address.
     * @param identifier the identifier value / target identifier value related to this event
     * @param reason a human readable reason for the hard bounce
     * @param ts the time of the event. If left blank, the recevied time will be used.
     * @param data additional event data to add to the event
     */
    hardBounce(identifier: string, reason: string, ts?: Date | string | number, data?: EventData): Promise<void>;
    /**
     * Send a campaign soft bounce event, which means you were unable to deliver,
     * but the identifier may still be reachable. E.g., the provider is temporarily unavailable.
     * @param identifier the identifier value / target identifier value related to this event
     * @param reason a human readable reason for the soft bounce
     * @param ts the time of the event. If left blank, the recevied time will be used.
     * @param data additional event data to add to the event
     */
    softBounce(identifier: string, reason: string, ts?: Date | string | number, data?: EventData): Promise<void>;
    /**
     * Send a campaign related opt-out event, such as, when a customer unsubscribes or replies STOP to an SMS.
     * Consent will be revoked on the identifier.
     * @param identifier the identifier value / target identifier value related to this event
     * @param reason a human readable reason for the opt-out
     * @param ts the time of the event. If left blank, the recevied time will be used.
     * @param data additional event data to add to the event
     */
    optOut(identifier: string, reason: string, ts?: Date | string | number, data?: EventData): Promise<void>;
    /**
     * Send a campaign related opt-in event, such as, when a customer re-subscribes or replies UNSTOP to an SMS.
     * This is considered a consent opt-in for the identifier.
     * @param identifier the identifier value / target identifier value related to this event
     * @param reason a human readable reason for the opt-in
     * @param ts the time of the event. If left blank, the recevied time will be used.
     * @param data additional event data to add to the event
     */
    optIn(identifier: string, reason: string, ts?: Date | string | number, data?: EventData): Promise<void>;
}
//# sourceMappingURL=CampaignEvents.d.ts.map