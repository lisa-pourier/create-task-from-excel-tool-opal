import { FormResult, Intent } from './FormResult';
/**
 * @hidden
 */
export interface LifecycleSettingsResponse {
    errors?: {
        [ref: string]: string[];
    };
    toasts?: Array<{
        intent: Intent;
        message: string;
    }>;
    redirect?: string;
    redirectMode?: 'url' | 'settings';
}
/**
 * Used to compose a response to the onSettingsForm lifecycle request
 */
export declare class LifecycleSettingsResult extends FormResult {
    private redirectValue?;
    private redirectMode?;
    /**
     * Add an error to display to the user for a particular form field (implicitly scoped to the submitted section)
     * @param field key to display the error under, as defined in the form schema
     * @param error message to display to the user
     */
    addError(field: string, error: string): this;
    /**
     * Redirect the user to another page, such as for an OAuth flow. Calling this method will override any value
     * previously set by {@link redirectToSettings}.
     * @param url the destination URL for the redirect (location header)
     */
    redirect(url: string): this;
    /**
     * Redirect the user to a particular section of the settings form. Calling this method will override any value
     * previously set by {@link redirect}.
     * @param section to open
     */
    redirectToSettings(section: string): this;
    /**
     * @hidden
     * Used internally to get the complete response
     */
    getResponse(section: string): LifecycleSettingsResponse;
}
//# sourceMappingURL=LifecycleSettingsResult.d.ts.map