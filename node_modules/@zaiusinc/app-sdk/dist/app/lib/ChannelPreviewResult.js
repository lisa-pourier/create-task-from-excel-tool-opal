"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelPreviewResult = void 0;
const FormResult_1 = require("./FormResult");
/**
 * Result of {@link Channel.preview}. All previews must be a full HTML page. There must be exactly one preview per
 * recipient, and they must be added to this result in the same order as the recipients were given to
 * {@link Channel.preview}.
 */
class ChannelPreviewResult extends FormResult_1.FormResult {
    previews;
    displayOptions;
    /**
     * @param previews the complete set of HTML previews, if already known
     */
    constructor(previews) {
        super();
        this.previews = previews || [];
    }
    /**
     * Add a single HTML preview
     * @param preview to add
     */
    addPreview(preview) {
        this.previews.push(preview);
        return this;
    }
    /**
     * Provide the complete set of HTML previews
     * @param previews to provide
     */
    setPreviews(previews) {
        this.previews = previews;
        return this;
    }
    /**
     * Set options to control how the preview is displayed
     * @param displayOptions to control the preview
     */
    setDisplayOptions(displayOptions) {
        this.displayOptions = displayOptions;
        return this;
    }
    /**
     * Add an error to display to the user for a particular form field
     * @param form the type of content form that the error applies to (settings or template)
     * @param section the section within the form that the error applies to
     * @param field the field within the section that the error applies to
     * @param error message to display to the user
     */
    addError(form, section, field, error) {
        return this.addErrorInternal(`${form}.${section}.${field}`, error);
    }
    /**
     * @hidden
     * Used internally to get the complete response
     */
    getResponse() {
        if ((!this.previews || this.previews.length === 0) &&
            Object.keys(this.errors).length === 0 &&
            this.toasts.length === 0) {
            this.addToast('danger', 'Failed to generate preview');
        }
        return {
            previews: this.previews,
            displayOptions: this.displayOptions,
            errors: this.errors,
            toasts: this.toasts
        };
    }
}
exports.ChannelPreviewResult = ChannelPreviewResult;
//# sourceMappingURL=ChannelPreviewResult.js.map