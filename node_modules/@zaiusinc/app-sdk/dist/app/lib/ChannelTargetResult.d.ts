import { CampaignTargeting } from '../Channel';
import { FormResult, Intent } from './FormResult';
/**
 * @hidden
 */
export interface ChannelTargetResponse {
    targeting?: CampaignTargeting[];
    errors?: {
        [ref: string]: string[];
    };
    toasts?: Array<{
        intent: Intent;
        message: string;
    }>;
}
/**
 * Result of {@link Channel.target}.
 */
export declare class ChannelTargetResult extends FormResult {
    private targeting;
    /**
     * @param targeting the complete set of targeting requirements, if already known
     */
    constructor(targeting?: CampaignTargeting[]);
    /**
     * Add a single targeting requirement
     * @param targeting requirement to add
     */
    addTargeting(targeting: CampaignTargeting): this;
    /**
     * Provide the complete set of targeting requirements
     * @param targeting requirements to provide
     */
    setTargeting(targeting: CampaignTargeting[]): this;
    /**
     * Add an error to display to the user for a particular form field (implicitly scoped to the content settings form)
     * @param section the section within the form that the error applies to
     * @param field the field within the section that the error applies to
     * @param error message to display to the user
     */
    addError(section: string, field: string, error: string): this;
    /**
     * @hidden
     * Used internally to get the complete response
     */
    getResponse(): ChannelTargetResponse;
}
//# sourceMappingURL=ChannelTargetResult.d.ts.map