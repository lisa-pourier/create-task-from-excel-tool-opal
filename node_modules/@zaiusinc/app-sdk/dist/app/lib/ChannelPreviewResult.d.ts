import { FormResult, Intent } from './FormResult';
/**
 * @hidden
 */
export interface ChannelPreviewResponse {
    previews?: string[];
    displayOptions?: PreviewDisplayOptions;
    errors?: {
        [ref: string]: string[];
    };
    toasts?: Array<{
        intent: Intent;
        message: string;
    }>;
}
/**
 * Options to control how previews are displayed.
 */
export interface PreviewDisplayOptions {
    minWidth?: number;
    minHeight?: number;
}
/**
 * Result of {@link Channel.preview}. All previews must be a full HTML page. There must be exactly one preview per
 * recipient, and they must be added to this result in the same order as the recipients were given to
 * {@link Channel.preview}.
 */
export declare class ChannelPreviewResult extends FormResult {
    private previews;
    private displayOptions?;
    /**
     * @param previews the complete set of HTML previews, if already known
     */
    constructor(previews?: string[]);
    /**
     * Add a single HTML preview
     * @param preview to add
     */
    addPreview(preview: string): this;
    /**
     * Provide the complete set of HTML previews
     * @param previews to provide
     */
    setPreviews(previews: string[]): this;
    /**
     * Set options to control how the preview is displayed
     * @param displayOptions to control the preview
     */
    setDisplayOptions(displayOptions: PreviewDisplayOptions): this;
    /**
     * Add an error to display to the user for a particular form field
     * @param form the type of content form that the error applies to (settings or template)
     * @param section the section within the form that the error applies to
     * @param field the field within the section that the error applies to
     * @param error message to display to the user
     */
    addError(form: 'settings' | 'template', section: string, field: string, error: string): this;
    /**
     * @hidden
     * Used internally to get the complete response
     */
    getResponse(): ChannelPreviewResponse;
}
//# sourceMappingURL=ChannelPreviewResult.d.ts.map