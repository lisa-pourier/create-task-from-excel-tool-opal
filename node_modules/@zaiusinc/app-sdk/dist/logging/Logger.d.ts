import { ValueHash } from '../store';
/**
 * Supported log levels, in order of least important to most.
 */
export declare enum LogLevel {
    Debug = 1,
    Info = 2,
    Warn = 3,
    Error = 4,
    /**
     * NEVER should only be used for testing purposes to silence all logs
     */
    NEVER = 5
}
/**
 * Visibility of the log output
 */
export declare enum LogVisibility {
    /**
     * Zaius: for SDK internal use only
     */
    Zaius = "zaius",
    /**
     * Developer: Make the log visible to app developers
     */
    Developer = "developer"
}
/**
 * @hidden
 * Context added to each log automatically by the SDK
 * This is set automatically when the app code is called by the engine.
 * Different fields will be set depending on how the app code is being executed
 * (e.g. function, job, data sync, etc.)
 */
export interface LogContext extends ValueHash {
    app_id: string;
    app_version: string;
    entry_point: string;
    tracker_id?: string;
}
export interface LoggerOptions {
    maxLineLength: number;
    defaultVisibility: LogVisibility;
}
export declare const LOG_LEVELS: {
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
};
export declare const LOG_LEVELS_BY_STRING: {
    [key: string]: LogLevel;
};
/**
 * @hidden
 * Set automatically when an app starts up
 * @param logContext configuration for runtime
 */
export declare function setLogContext(logContext: LogContext): void;
/**
 * @hidden
 * Amend the current log context with additional information
 */
export declare function amendLogContext(extra_fields: {
    [field: string]: string | number | boolean;
}): void;
/**
 * @hidden
 * Set the current LogLevel
 * @param logLevel to set
 */
export declare function setLogLevel(logLevel: LogLevel): void;
/**
 * OCP Logger interface
 */
export interface ILogger {
    /**
     * Write something to the logs at the Debug level
     * @param args One or more values to log.
     *   Objects are formatted using `util.inspect`, other values are converted to a string.
     *   Multiple values are concatenated with a space between
     */
    debug(...args: any[]): void;
    /**
     * Write something to the logs at the Debug level
     * @param visibility log visibility level (to override the default visibility)
     * @param args One or more values to log.
     *   Objects are formatted using `util.inspect`, other values are converted to a string.
     *   Multiple values are concatenated with a space between
     */
    debug(visibility: LogVisibility, ...args: any[]): void;
    /**
     * Write something to the logs at the Info level
     * @param args One or more values to log.
     *   Objects are formatted using `util.inspect`, other vaules are converted to a string.
     *   Multiple values are concatenated with a space between
     */
    info(...args: any[]): void;
    /**
     * Write something to the logs at the Info level
     * @param visibility log visibility level (to override the default visibility)
     * @param args One or more values to log.
     *   Objects are formatted using `util.inspect`, other values are converted to a string.
     *   Multiple values are concatenated with a space between
     */
    info(visibility: LogVisibility, ...args: any[]): void;
    /**
     * Write something to the logs at the Warning level
     * @param args One or more values to log.
     *   Objects are formatted using `util.inspect`, other values are converted to a string.
     *   Multiple values are concatenated with a space between
     */
    warn(...args: any[]): void;
    /**
     * Write something to the logs at the Warning level
     * @param visibility log visibility level (to override the default visibility)
     * @param args One or more values to log.
     *   Objects are formatted using `util.inspect`, other values are converted to a string.
     *   Multiple values are concatenated with a space between
     */
    warn(visibility: LogVisibility, ...args: any[]): void;
    /**
     * Write something to the logs at the Error level
     * @param args One or more values to log.
     *   Objects are formatted using `util.inspect`, other values are converted to a string.
     *   Multiple values are concatenated with a space between
     */
    error(...args: any[]): void;
    /**
     * Write something to the logs at the Error level
     * @param visibility log visibility level (to override the default visibility)
     * @param args One or more values to log.
     *   Objects are formatted using `util.inspect`, other values are converted to a string.
     *   Multiple values are concatenated with a space between
     */
    error(visibility: LogVisibility, ...args: any[]): void;
}
export declare const DEFAULT_LOG_LEVEL: LogLevel;
/**
 * @hidden
 * Internal Logger implementation. Use the instance provided by the App SDK exports instead.
 */
export declare class Logger implements ILogger {
    private maxLineLength;
    private defaultVisibility;
    constructor(options?: Partial<LoggerOptions>);
    private getLogLevel;
    debug(...args: any[]): void;
    info(...args: any[]): void;
    warn(...args: any[]): void;
    error(...args: any[]): void;
    private log;
    private truncateMessage;
}
/**
 * Logger instance to be used by OCP apps.
 * Minimum log level can be configured by using `ocp app set-log-level` command, e.g.:
 *  `ocp app set-log-level my_app@1.0.0 error`
 *  `ocp app set-log-level my_app@1.0.0 info`
 * To get the current log level of an app, use the command `ocp app get-log-level` command, e.g.:
 *  `ocp app get-log-level my_app@1.0.0 --trackerId=1234`
 * Accepted levels include debug, info, warn, error
 */
export declare const logger: ILogger;
//# sourceMappingURL=Logger.d.ts.map