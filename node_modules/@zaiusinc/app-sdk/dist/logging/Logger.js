"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.Logger = exports.DEFAULT_LOG_LEVEL = exports.LOG_LEVELS_BY_STRING = exports.LOG_LEVELS = exports.LogVisibility = exports.LogLevel = void 0;
exports.setLogContext = setLogContext;
exports.amendLogContext = amendLogContext;
exports.setLogLevel = setLogLevel;
const util = __importStar(require("util"));
/**
 * Supported log levels, in order of least important to most.
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Warn"] = 3] = "Warn";
    LogLevel[LogLevel["Error"] = 4] = "Error";
    /**
     * NEVER should only be used for testing purposes to silence all logs
     */
    LogLevel[LogLevel["NEVER"] = 5] = "NEVER";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
/**
 * Visibility of the log output
 */
var LogVisibility;
(function (LogVisibility) {
    /**
     * Zaius: for SDK internal use only
     */
    LogVisibility["Zaius"] = "zaius";
    /**
     * Developer: Make the log visible to app developers
     */
    LogVisibility["Developer"] = "developer";
})(LogVisibility || (exports.LogVisibility = LogVisibility = {}));
exports.LOG_LEVELS = {
    [LogLevel.Debug]: 'debug',
    [LogLevel.Info]: 'info',
    [LogLevel.Warn]: 'warn',
    [LogLevel.Error]: 'error',
    [LogLevel.NEVER]: 'NEVER'
};
exports.LOG_LEVELS_BY_STRING = {
    debug: LogLevel.Debug,
    info: LogLevel.Info,
    warn: LogLevel.Warn,
    error: LogLevel.Error,
    NEVER: LogLevel.NEVER
};
const visibilityValues = new Set([LogVisibility.Zaius, LogVisibility.Developer]);
const INSPECT_OPTIONS = {
    depth: 5,
    color: false
};
let context;
/**
 * @hidden
 * Set automatically when an app starts up
 * @param logContext configuration for runtime
 */
function setLogContext(logContext) {
    context = logContext;
}
/**
 * @hidden
 * Amend the current log context with additional information
 */
function amendLogContext(extra_fields) {
    context && (context = { ...context, ...extra_fields });
}
function getLogContext() {
    return global.ocpContextStorage?.getStore()?.ocpRuntime?.logContext || context;
}
let level;
/**
 * @hidden
 * Set the current LogLevel
 * @param logLevel to set
 */
function setLogLevel(logLevel) {
    level = logLevel;
}
function getLogLevel() {
    return global.ocpContextStorage?.getStore()?.ocpRuntime?.logLevel || level;
}
exports.DEFAULT_LOG_LEVEL = exports.LOG_LEVELS_BY_STRING[process.env.LOG_LEVEL || 'debug'] || LogLevel.Debug;
const DEFAULT_VISIBILITY = LogVisibility.Developer;
const MAX_LINE_LENGTH = parseInt(process.env.LOG_MAX_MESSAGE_LENGTH || '4096', 10);
/**
 * @hidden
 * Internal Logger implementation. Use the instance provided by the App SDK exports instead.
 */
class Logger {
    maxLineLength;
    defaultVisibility;
    constructor(options = {}) {
        this.maxLineLength = Math.min(options.maxLineLength || MAX_LINE_LENGTH, MAX_LINE_LENGTH);
        this.defaultVisibility = options.defaultVisibility || DEFAULT_VISIBILITY;
    }
    getLogLevel() {
        return getLogLevel() || exports.DEFAULT_LOG_LEVEL;
    }
    debug(...args) {
        if (this.getLogLevel() <= LogLevel.Debug) {
            if (typeof args[0] === 'string' && visibilityValues.has(args[0])) {
                this.log(LogLevel.Debug, args[0], ...args.slice(1));
            }
            else {
                this.log(LogLevel.Debug, this.defaultVisibility, ...args);
            }
        }
    }
    info(...args) {
        if (this.getLogLevel() <= LogLevel.Info) {
            if (typeof args[0] === 'string' && visibilityValues.has(args[0])) {
                this.log(LogLevel.Info, args[0], ...args.slice(1));
            }
            else {
                this.log(LogLevel.Info, this.defaultVisibility, ...args);
            }
        }
    }
    warn(...args) {
        if (this.getLogLevel() <= LogLevel.Warn) {
            if (typeof args[0] === 'string' && visibilityValues.has(args[0])) {
                this.log(LogLevel.Warn, args[0], ...args.slice(1));
            }
            else {
                this.log(LogLevel.Warn, this.defaultVisibility, ...args);
            }
        }
    }
    error(...args) {
        if (this.getLogLevel() <= LogLevel.Error) {
            if (typeof args[0] === 'string' && visibilityValues.has(args[0])) {
                this.log(LogLevel.Error, args[0], ...args.slice(1));
            }
            else {
                this.log(LogLevel.Error, this.defaultVisibility, ...args);
            }
        }
    }
    log(logLevel, visibility, ...args) {
        const time = new Date().toISOString();
        let stacktrace;
        for (let i = 0; i < args.length; i++) {
            const arg = args[i];
            if (typeof arg === 'object') {
                if (arg instanceof Error) {
                    if (!stacktrace) {
                        stacktrace = arg.stack;
                        args[i] = `${arg.name}: ${arg.message}`;
                        continue;
                    }
                }
                args[i] = util.inspect(arg, INSPECT_OPTIONS);
            }
        }
        (logLevel === LogLevel.Error ? process.stderr : process.stdout).write(JSON.stringify({
            time,
            level: exports.LOG_LEVELS[logLevel],
            message: this.truncateMessage(args.join(' ')),
            stacktrace,
            audience: visibility,
            context: getLogContext()
        }) + '\n');
    }
    truncateMessage(message) {
        if (message.length <= this.maxLineLength) {
            return message;
        }
        return message.slice(0, this.maxLineLength - 3) + '...';
    }
}
exports.Logger = Logger;
/**
 * Logger instance to be used by OCP apps.
 * Minimum log level can be configured by using `ocp app set-log-level` command, e.g.:
 *  `ocp app set-log-level my_app@1.0.0 error`
 *  `ocp app set-log-level my_app@1.0.0 info`
 * To get the current log level of an app, use the command `ocp app get-log-level` command, e.g.:
 *  `ocp app get-log-level my_app@1.0.0 --trackerId=1234`
 * Accepted levels include debug, info, warn, error
 */
exports.logger = new Logger();
//# sourceMappingURL=Logger.js.map