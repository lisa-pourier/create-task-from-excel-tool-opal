"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStore = void 0;
const logging_1 = require("../logging");
const CasError_1 = require("./CasError");
/**
 * @hidden
 * A stub of the key value store
 *
 * @TODO implement the stub for local development purposes
 */
class LocalStore {
    store;
    constructor(store) {
        this.store = store;
    }
    reset() {
        this.store.reset();
    }
    async get(key, fields) {
        return this.filter((await this.store.get(key)).value || {}, fields);
    }
    async put(key, value) {
        if (value) {
            await this.store.put(key, value);
        }
        else {
            await this.store.delete(key);
        }
        return true;
    }
    async patch(key, value) {
        if (typeof value === 'function') {
            return (await this.patchWithRetry(key, value));
        }
        else {
            return await this.patchWithRetry(key, (previous) => Object.assign(previous, value));
        }
    }
    async delete(key, fields) {
        if (fields) {
            await this.patchWithRetry(key, (previous) => {
                fields.forEach((f) => delete previous[f]);
                return previous;
            });
        }
        else {
            await this.store.delete(key);
        }
        return true;
    }
    async exists(key) {
        return await this.store.exists(key);
    }
    filter(result, fields) {
        if (fields) {
            const copy = {};
            fields.forEach((f) => (copy[f] = result[f]));
            return copy;
        }
        return result;
    }
    async patchWithRetry(key, updater, retries = 5) {
        const stored = await this.store.get(key);
        const previous = JSON.stringify(stored.value);
        const update = updater(stored.value);
        try {
            await this.store.put(key, update, undefined, stored.cas);
            return JSON.parse(previous);
        }
        catch (e) {
            if (e instanceof CasError_1.CasError) {
                if (retries > 0) {
                    return this.patchWithRetry(key, updater, retries - 1);
                }
                throw new Error(`Failed to update key ${key}. CAS retries exhausted.`);
            }
            else {
                logging_1.logger.error(e);
            }
            throw new Error(`Failed to update key ${key}`);
        }
    }
}
exports.LocalStore = LocalStore;
//# sourceMappingURL=LocalStore.js.map