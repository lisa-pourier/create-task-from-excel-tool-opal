"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storage = exports.initializeStores = void 0;
exports.resetLocalStores = resetLocalStores;
exports.resetLocalSettingsStore = resetLocalSettingsStore;
exports.resetLocalSecretsStore = resetLocalSecretsStore;
exports.resetLocalKvStore = resetLocalKvStore;
exports.resetLocalSharedKvStore = resetLocalSharedKvStore;
const LocalAsyncStoreBackend_1 = require("./LocalAsyncStoreBackend");
const LocalKVStore_1 = require("./LocalKVStore");
const LocalStore_1 = require("./LocalStore");
let settingsStore = new LocalStore_1.LocalStore(new LocalAsyncStoreBackend_1.LocalAsyncStoreBackend());
let secretsStore = new LocalStore_1.LocalStore(new LocalAsyncStoreBackend_1.LocalAsyncStoreBackend());
let kvStore = new LocalKVStore_1.LocalKVStore(new LocalAsyncStoreBackend_1.LocalAsyncStoreBackend());
let sharedKvStore = new LocalKVStore_1.LocalKVStore(new LocalAsyncStoreBackend_1.LocalAsyncStoreBackend());
function resetLocalStores() {
    resetLocalSettingsStore();
    resetLocalSecretsStore();
    resetLocalKvStore();
    resetLocalSharedKvStore();
}
function resetLocalSettingsStore() {
    if (exports.storage.settings instanceof LocalStore_1.LocalStore) {
        exports.storage.settings.reset();
    }
    else {
        throw new Error('Attempting to reset non-local store');
    }
}
function resetLocalSecretsStore() {
    if (exports.storage.secrets instanceof LocalStore_1.LocalStore) {
        exports.storage.secrets.reset();
    }
    else {
        throw new Error('Attempting to reset non-local store');
    }
}
function resetLocalKvStore() {
    if (exports.storage.kvStore instanceof LocalKVStore_1.LocalKVStore) {
        exports.storage.kvStore.reset();
    }
    else {
        throw new Error('Attempting to reset non-local store');
    }
}
function resetLocalSharedKvStore() {
    if (exports.storage.sharedKvStore instanceof LocalKVStore_1.LocalKVStore) {
        exports.storage.sharedKvStore.reset();
    }
    else {
        throw new Error('Attempting to reset non-local store');
    }
}
/**
 * @hidden
 */
const initializeStores = (config) => {
    settingsStore = config.settings;
    secretsStore = config.secrets;
    kvStore = config.kvStore;
    sharedKvStore = config.sharedKvStore;
};
exports.initializeStores = initializeStores;
/**
 * Namespace for accessing storage apis
 */
exports.storage = {
    /**
     * The settings store
     */
    get settings() {
        return global.ocpContextStorage?.getStore()?.ocpRuntime?.settingsStore || settingsStore;
    },
    /**
     * The secrets store
     */
    get secrets() {
        return global.ocpContextStorage?.getStore()?.ocpRuntime?.secretsStore || secretsStore;
    },
    /**
     * The key-value store
     */
    get kvStore() {
        return global.ocpContextStorage?.getStore()?.ocpRuntime?.kvStore || kvStore;
    },
    /**
     * The shared key-value store
     */
    get sharedKvStore() {
        return global.ocpContextStorage?.getStore()?.ocpRuntime?.sharedKvStore || sharedKvStore;
    }
};
//# sourceMappingURL=storage.js.map