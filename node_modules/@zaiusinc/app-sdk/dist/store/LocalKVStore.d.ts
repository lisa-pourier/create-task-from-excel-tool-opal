import { Value } from './BaseKVStore';
import { KVHash, KVPatchUpdater, KVRowOptions, KVStore, KVValue, MultiValue } from './KVStore';
import { LocalAsyncStoreBackend } from './LocalAsyncStoreBackend';
import { NumberSet } from './NumberSet';
import { StringSet } from './StringSet';
/**
 * @hidden
 * A stub of the key value store
 *
 * @TODO implement the stub for local development purposes
 */
export declare class LocalKVStore implements KVStore {
    private store;
    constructor(store: LocalAsyncStoreBackend<KVHash>);
    reset(): void;
    get<T extends KVHash>(key: string, fields?: string[]): Promise<T>;
    put<T extends KVHash>(key: string, value: T, options?: KVRowOptions): Promise<T>;
    patch<T extends KVHash>(key: string, value: T | KVPatchUpdater<T>, options?: KVRowOptions): Promise<T>;
    delete<T extends KVHash>(key: string, fields?: string[]): Promise<T>;
    exists(key: string): Promise<boolean>;
    increment(key: string, field: string, amount?: number): Promise<number>;
    incrementMulti(key: string, fieldAmounts: {
        [field: string]: number;
    }): Promise<{
        [field: string]: number;
    }>;
    shift<T extends Value>(key: string, field: string): Promise<T | undefined>;
    shiftMulti<T extends KVValue>(key: string, fieldCounts: MultiValue<number>): Promise<MultiValue<T[]>>;
    unshift<T extends KVValue>(key: string, field: string, value: T): Promise<void>;
    unshiftMulti<T extends KVValue>(key: string, fieldValues: MultiValue<T[]>): Promise<void>;
    peek<T extends KVValue>(key: string, field: string): Promise<T | undefined>;
    peekMulti<T extends KVValue>(key: string, fieldCounts: MultiValue<number>): Promise<MultiValue<T[]>>;
    append<T extends KVValue>(key: string, field: string, value: T): Promise<void>;
    appendMulti<T extends KVValue>(key: string, fieldValues: MultiValue<T[]>): Promise<void>;
    addNumber(key: string, field: string, value: number): Promise<boolean>;
    addNumberMulti(key: string, fieldValues: MultiValue<number[]>): Promise<MultiValue<NumberSet>>;
    removeNumber(key: string, field: string, value: number): Promise<boolean>;
    removeNumberMulti(key: string, fieldValues: MultiValue<number[]>): Promise<MultiValue<NumberSet>>;
    hasNumber(key: string, field: string, value: number): Promise<boolean>;
    hasNumberMulti(key: string, fieldValues: MultiValue<number[]>): Promise<MultiValue<NumberSet>>;
    addString(key: string, field: string, value: string): Promise<boolean>;
    addStringMulti(key: string, fieldValues: MultiValue<string[]>): Promise<MultiValue<StringSet>>;
    removeString(key: string, field: string, value: string): Promise<boolean>;
    removeStringMulti(key: string, fieldValues: MultiValue<string[]>): Promise<MultiValue<StringSet>>;
    hasString(key: string, field: string, value: string): Promise<boolean>;
    hasStringMulti(key: string, fieldValues: MultiValue<string[]>): Promise<MultiValue<StringSet>>;
    private performArrayOperation;
    private performSetOperation;
    private patchWithRetry;
}
//# sourceMappingURL=LocalKVStore.d.ts.map