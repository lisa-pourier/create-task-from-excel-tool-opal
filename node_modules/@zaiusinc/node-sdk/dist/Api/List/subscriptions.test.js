"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("jest");
const ApiV3_1 = require("../lib/ApiV3");
const subscriptions_1 = require("./subscriptions");
const mockConfiguration = {
    apiBasePath: 'https://api.zaius.com/v3/',
    apiKey: 'api-key'
};
let apiV3;
describe('subscriptions', () => {
    beforeAll(() => {
        apiV3 = new ApiV3_1.ApiV3.API(mockConfiguration);
    });
    describe('subscribe', () => {
        it('subscribes a user to a list', async () => {
            const postFn = jest.spyOn(apiV3, 'post').mockResolvedValueOnce({});
            await (0, subscriptions_1.subscribe)(apiV3, 'everybody', { email: 'foo@optimizely.com' });
            expect(postFn).toHaveBeenCalledWith('/lists/subscriptions', [
                {
                    list_id: 'everybody',
                    email: 'foo@optimizely.com',
                    subscribed: true
                }
            ]);
            postFn.mockRestore();
        });
        it('subscribes multiple users to a list', async () => {
            const postFn = jest.spyOn(apiV3, 'post').mockResolvedValueOnce({});
            await (0, subscriptions_1.subscribe)(apiV3, 'everybody', [{ email: 'foo@optimizely.com' }, { email: 'bar@optimizely.com', phone: '+15555550000' }]);
            expect(postFn).toHaveBeenCalledWith('/lists/subscriptions', [
                {
                    list_id: 'everybody',
                    email: 'foo@optimizely.com',
                    subscribed: true
                },
                {
                    list_id: 'everybody',
                    email: 'bar@optimizely.com',
                    phone: '+15555550000',
                    subscribed: true
                }
            ]);
            postFn.mockRestore();
        });
    });
    describe('unsubscribe', () => {
        it('unsubscribes a user to a list', async () => {
            const postFn = jest.spyOn(apiV3, 'post').mockResolvedValueOnce({});
            await (0, subscriptions_1.unsubscribe)(apiV3, 'everybody', { email: 'foo@optimizely.com' });
            expect(postFn).toHaveBeenCalledWith('/lists/subscriptions', [
                {
                    list_id: 'everybody',
                    email: 'foo@optimizely.com',
                    subscribed: false
                }
            ]);
            postFn.mockRestore();
        });
        it('unsubscribes multiple users to a list', async () => {
            const postFn = jest.spyOn(apiV3, 'post').mockResolvedValueOnce({});
            await (0, subscriptions_1.unsubscribe)(apiV3, 'everybody', [{ email: 'foo@optimizely.com' }, { email: 'bar@optimizely.com', phone: '+15555550000' }]);
            expect(postFn).toHaveBeenCalledWith('/lists/subscriptions', [
                {
                    list_id: 'everybody',
                    email: 'foo@optimizely.com',
                    subscribed: false
                },
                {
                    list_id: 'everybody',
                    email: 'bar@optimizely.com',
                    phone: '+15555550000',
                    subscribed: false
                }
            ]);
            postFn.mockRestore();
        });
    });
    describe('updateSubscriptions', () => {
        it('updates multiple subscriptions', async () => {
            const postFn = jest.spyOn(apiV3, 'post').mockResolvedValueOnce({});
            await (0, subscriptions_1.updateSubscriptions)(apiV3, 'everybody', [
                { email: 'foo@optimizely.com', list_id: 'foo_only', subscribed: true },
                { email: 'bar@optimizely.com', phone: '+15555550000', subscribed: false }
            ]);
            expect(postFn).toHaveBeenCalledWith('/lists/subscriptions', [
                {
                    list_id: 'foo_only',
                    email: 'foo@optimizely.com',
                    subscribed: true
                },
                {
                    list_id: 'everybody',
                    email: 'bar@optimizely.com',
                    phone: '+15555550000',
                    subscribed: false
                }
            ]);
        });
        it('throws an error if the batch limit is exceeded', async () => {
            const postFn = jest.spyOn(apiV3, 'post').mockResolvedValueOnce({});
            const updates = Array(101).fill({
                list_id: 'nobody',
                email: 'foo@optimizely.com',
                subscribed: false
            });
            await expect((0, subscriptions_1.updateSubscriptions)(apiV3, 'everybody', updates)).rejects.toThrowError('maximum batch size');
            postFn.mockRestore();
        });
        it('throws an error if the api returns an error', async () => {
            const postFn = jest
                .spyOn(apiV3, 'post')
                .mockRejectedValueOnce(new ApiV3_1.ApiV3.HttpError('Bad Request', undefined, {}));
            await expect((0, subscriptions_1.updateSubscriptions)(apiV3, 'foo', [
                {
                    list_id: 'nobody',
                    email: 'foo@optimizely.com',
                    subscribed: false
                }
            ])).rejects.toThrowError('Bad Request');
            postFn.mockRestore();
        });
    });
});
//# sourceMappingURL=subscriptions.test.js.map