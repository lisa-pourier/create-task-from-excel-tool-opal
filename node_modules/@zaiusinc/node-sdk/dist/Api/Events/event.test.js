"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deep_freeze_1 = __importDefault(require("deep-freeze"));
require("jest");
const ApiV3_1 = require("../lib/ApiV3");
const event_1 = require("./event");
describe('event', () => {
    const mockConfiguration = {
        apiBasePath: 'https://api.zaius.com/v3/',
        apiKey: 'api-key',
    };
    const apiV3 = new ApiV3_1.ApiV3.API(mockConfiguration);
    let postMock;
    beforeEach(() => {
        postMock = jest.spyOn(apiV3, 'post').mockReturnValue(Promise.resolve({}));
    });
    it('sends a post to /events', async () => {
        const payload = (0, deep_freeze_1.default)({ type: 'pageview', identifiers: { email: 'test@optimizely.com' }, data: { page: 'foo' } });
        await (0, event_1.event)(apiV3, payload);
        expect(postMock).toHaveBeenCalledWith('/events', payload);
    });
    it('throws an error if too many events are sent in one call', async () => {
        const payload = [];
        for (let i = 0; i < ApiV3_1.ApiV3.BATCH_LIMIT + 1; i++) {
            payload.push({ type: 'pageview', identifiers: { email: 'test@optimizely.com' }, data: { page: 'foo' } });
        }
        expect.assertions(2);
        try {
            await (0, event_1.event)(apiV3, payload);
        }
        catch (error) {
            expect(error.message).toMatch(/maximum batch size/);
            expect(error.code).toEqual(ApiV3_1.ApiV3.ErrorCode.BatchLimitExceeded);
        }
    });
});
//# sourceMappingURL=event.test.js.map