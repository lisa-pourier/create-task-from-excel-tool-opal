import { Schema } from './Schema';
import { Identifier } from './Identifiers';
import { Lists } from './List';
import { ApiV3 } from './lib/ApiV3';
import { Config, InternalConfig } from './config/configure';
import { CustomerPayload, CustomerResponse, EventPayload, EventResponse, ObjectPayload, ObjectResponse, PayloadOptions } from './Types';
import { GqlHttpResponse } from './Types/GraphQL';
export declare class ODPClient {
    /**
     * Manage schema (ODP domain objects and fields) using the v3 APIs
     */
    schema: Schema;
    /**
     * Manage customer identifiers using the v3 APIs
     */
    identifier: Identifier;
    /**
     * Manage list subscriptions using the v3 APIs
     */
    list: Lists;
    /**
     * Direct access to query any API by path using the v3 API helper
     */
    v3Api: ApiV3.API;
    constructor(config?: Config | InternalConfig | null);
    /**
     * Send an event to ODP using the v3 event API
     */
    event: (payload: EventPayload | EventPayload[]) => Promise<ApiV3.HttpResponse<EventResponse>>;
    /**
     * Create or Update a customer profile in ODP using the v3 profiles API
     */
    customer: (payload: CustomerPayload | CustomerPayload[], opts?: PayloadOptions) => Promise<ApiV3.HttpResponse<CustomerResponse>>;
    /**
     * Create or Update an object in ODP using the v3 objects API
     */
    object: (type: string, payload: ObjectPayload | ObjectPayload[], opts?: PayloadOptions) => Promise<ApiV3.HttpResponse<ObjectResponse>>;
    /**
     * Query data using the GraphQL API
     */
    graphql: <T extends ApiV3.V3Response>(query: string, variables?: {
        [key: string]: any;
    }) => Promise<GqlHttpResponse<T>>;
}
//# sourceMappingURL=ODPClient.d.ts.map