"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("jest");
const ApiV3_1 = require("../lib/ApiV3");
const object_1 = require("./object");
const deep_freeze_1 = __importDefault(require("deep-freeze"));
const mockAppConfiguration = {
    apiBasePath: 'https://api.zaius.com/v3/',
    apiKey: 'api-key',
    appContext: {
        app_id: 'test',
        display_name: 'Test App',
        version: '1.0.0',
        vendor: 'optimizely',
    },
};
describe('object', () => {
    let postMock;
    const apiV3 = new ApiV3_1.ApiV3.API(mockAppConfiguration);
    beforeEach(() => {
        postMock = jest.spyOn(apiV3, 'post').mockReturnValue(Promise.resolve({}));
    });
    it('sends a post to /objects/{type}', async () => {
        const payload = Object.freeze({ product_id: 'P1234', name: 'Something Cool' });
        await (0, object_1.object)(apiV3, 'products', { ...payload });
        expect(postMock).toHaveBeenCalledWith('/objects/products', payload);
    });
    it('supports multiple updates', async () => {
        const payload = (0, deep_freeze_1.default)([
            { product_id: 'P1234', name: 'Something Cool' },
            { product_id: 'P0000', name: 'Something not Cool' },
        ]);
        await (0, object_1.object)(apiV3, 'products', [{ ...payload[0] }, { ...payload[1] }]);
        expect(postMock).toHaveBeenCalledWith('/objects/products', payload);
    });
    it('sanitizes the payload', async () => {
        const expectedPayload = Object.freeze({ product_id: 'P1234', name: 'Something Cool' });
        const payload = { ...expectedPayload, ...{ blank: ' ', nullValue: null } };
        await (0, object_1.object)(apiV3, 'products', payload);
        expect(postMock).toHaveBeenCalledWith('/objects/products', expectedPayload);
    });
    it('applies PayloadOptions', async () => {
        const expectedPayload = Object.freeze({ product_id: 'P1234', name: 'Something Cool', blank: ' ' });
        const payload = { product_id: 'P1234', name: 'Something Cool', blank: ' ', nullValue: null };
        await (0, object_1.object)(apiV3, 'products', payload, { trimToNull: false });
        expect(postMock).toHaveBeenCalledWith('/objects/products', expectedPayload);
    });
    it('throws an error if too many objects are sent in one call', async () => {
        const payload = [];
        for (let i = 0; i < ApiV3_1.ApiV3.BATCH_LIMIT + 1; i++) {
            payload.push({ product_id: 'P1234', name: 'Something Cool' });
        }
        expect.assertions(2);
        try {
            await (0, object_1.object)(apiV3, 'products', payload);
        }
        catch (error) {
            expect(error.message).toMatch(/maximum batch size/);
            expect(error.code).toEqual(ApiV3_1.ApiV3.ErrorCode.BatchLimitExceeded);
        }
    });
});
//# sourceMappingURL=object.test.js.map