"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.object = object;
const ApiV3_1 = require("../lib/ApiV3");
const PayloadSanitizer_1 = require("../lib/PayloadSanitizer");
/**
 * Send an object or a batch of objects to ODP
 * @param apiV3 the v3 API instance to use
 * @param type the object type, e.g. 'products'
 * @param payload an ODP object payload or an array of object payloads
 * @param opts a PayloadOptions instance defaults are trimToNull & excludeNulls
 * @returns the response from the API if successful
 * @throws {HttpError} if it receives a non-2XX result or if the batch size is > BATCH_LIMIT
 */
function object(apiV3, type, payload, opts) {
    if (Array.isArray(payload) && payload.length > ApiV3_1.ApiV3.BATCH_LIMIT) {
        return Promise.reject(apiV3.errorForCode(ApiV3_1.ApiV3.ErrorCode.BatchLimitExceeded));
    }
    (Array.isArray(payload) ? payload : [payload]).forEach((p) => PayloadSanitizer_1.PayloadSanitizer.sanitize(p, opts));
    return apiV3.post(`/objects/${type}`, payload);
}
//# sourceMappingURL=object.js.map