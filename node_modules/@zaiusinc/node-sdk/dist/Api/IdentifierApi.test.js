"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const IdentifierApi_1 = require("./IdentifierApi");
const index_1 = require("./index");
const metadata = __importStar(require("./Identifiers/identifiers"));
const reachability = __importStar(require("./Identifiers/reachability"));
const consent = __importStar(require("./Identifiers/consent"));
describe('IdentifierApi', () => {
    let identifierApi;
    let odpClient;
    beforeEach(() => {
        odpClient = new index_1.ODPClient();
        identifierApi = new IdentifierApi_1.IdentifierApi(odpClient);
    });
    it('should get consent', async () => {
        jest.spyOn(consent, 'getConsent').mockReturnValue(Promise.resolve({}));
        const identifierName = 'testName';
        const identifierValue = 'testValue';
        await identifierApi.getConsent(identifierName, identifierValue);
        expect(consent.getConsent).toHaveBeenCalledWith(odpClient.v3Api, identifierName, identifierValue);
    });
    it('should get metadata', async () => {
        jest.spyOn(metadata, 'getMetadata').mockReturnValue(Promise.resolve({}));
        const identifierFieldName = 'testField';
        const identifierValue = 'testValue';
        await identifierApi.getMetadata(identifierFieldName, identifierValue);
        expect(metadata.getMetadata).toHaveBeenCalledWith(odpClient.v3Api, identifierFieldName, identifierValue);
    });
    it('should get reachability', async () => {
        jest.spyOn(reachability, 'getReachability').mockReturnValue(Promise.resolve({}));
        const identifierName = 'testName';
        const value = 'testValue';
        await identifierApi.getReachability(identifierName, value);
        expect(reachability.getReachability).toHaveBeenCalledWith(odpClient.v3Api, identifierName, value);
    });
    it('should update consent', async () => {
        jest.spyOn(consent, 'updateConsent').mockReturnValue(Promise.resolve({}));
        const updates = {
            identifier_field_name: '',
            identifier_value: '',
            consent: false
        };
        await identifierApi.updateConsent(updates);
        expect(consent.updateConsent).toHaveBeenCalledWith(odpClient.v3Api, updates);
    });
    it('should update metadata', async () => {
        jest.spyOn(metadata, 'updateMetadata').mockReturnValue(Promise.resolve({}));
        const updates = {
            identifier_field_name: '',
            identifier_value: '',
            metadata: {}
        };
        await identifierApi.updateMetadata(updates);
        expect(metadata.updateMetadata).toHaveBeenCalledWith(odpClient.v3Api, updates);
    });
    it('should update reachability', async () => {
        jest.spyOn(reachability, 'updateReachability').mockReturnValue(Promise.resolve({}));
        const updates = {
            identifier_field_name: '',
            identifier_value: '',
            reachable: false
        };
        await identifierApi.updateReachability(updates);
        expect(reachability.updateReachability).toHaveBeenCalledWith(odpClient.v3Api, updates);
    });
});
//# sourceMappingURL=IdentifierApi.test.js.map