"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createField = createField;
const ApiV3_1 = require("../lib/ApiV3");
const ApiFieldExistsError_1 = require("./ApiFieldExistsError");
const ApiSchemaValidationError_1 = require("./ApiSchemaValidationError");
const invalidsContain_1 = require("./invalidsContain");
/**
 * Create a custom field on an ODP object
 * @param apiV3 the v3 API instance to use
 * @param object the ODP object to create the field on, e.g., `customers`
 * @param field the field to create
 * @throws {ApiFieldExistsError} if the field name already exists
 * @throws {HttpError} if it receives any other non-2XX result
 */
async function createField(apiV3, object, field) {
    validateCreateField(object, field, apiV3.getContext());
    try {
        return await apiV3.post(`/schema/objects/${object}/fields`, field);
    }
    catch (e) {
        if (e instanceof ApiV3_1.ApiV3.HttpError && e.response) {
            const invalids = e.response.data && e.response.data.detail && e.response.data.detail.invalids;
            if ((0, invalidsContain_1.invalidsContain)(invalids, 'name', (reason) => /^already used/.test(reason))) {
                throw new ApiFieldExistsError_1.ApiFieldExistsError(e);
            }
        }
        throw e;
    }
}
/**
 * @hidden
 * Temporary validation until we update milton
 */
function validateCreateField(object, field, context) {
    if (context && context.app_id) {
        const prefix = `${context.app_id}_`;
        if (!object.startsWith(prefix)) {
            if (!field.name.startsWith(prefix)) {
                throw new ApiSchemaValidationError_1.ApiSchemaValidationError(`field name ${field.name} must be prefixed with ${prefix}`);
            }
            if (!field.display_name.startsWith(context.display_name)) {
                throw new ApiSchemaValidationError_1.ApiSchemaValidationError(`field display name ${field.display_name} must be prefixed with ${context.display_name}`);
            }
        }
    }
}
//# sourceMappingURL=fields.js.map