"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getObject = getObject;
exports.getAllObjects = getAllObjects;
exports.createObject = createObject;
const ApiV3_1 = require("../lib/ApiV3");
const ApiObjectExistsError_1 = require("./ApiObjectExistsError");
const ApiObjectNotFoundError_1 = require("./ApiObjectNotFoundError");
const ApiSchemaValidationError_1 = require("./ApiSchemaValidationError");
const invalidsContain_1 = require("./invalidsContain");
/**
 * Gets the definition of an ODP object.
 * @param apiV3 the v3 API instance to use
 * @param name the object name
 * @throws {ApiObjectNotFoundError} if there is no object with the given name
 * @throws {HttpError} if it receives any other non-2XX result
 */
async function getObject(apiV3, name) {
    try {
        return await apiV3.get(`/schema/objects/${name}`);
    }
    catch (e) {
        if (e instanceof ApiV3_1.ApiV3.HttpError && e.response && e.response.status === 404) {
            throw new ApiObjectNotFoundError_1.ApiObjectNotFoundError(e);
        }
        throw e;
    }
}
/**
 * Gets the definitions of all ODP objects.
 * @param apiV3 the v3 API instance to use
 * @throws {HttpError} if it receives a non-2XX result
 */
async function getAllObjects(apiV3) {
    return await apiV3.get('/schema/objects');
}
/**
 * Create a custom ODP object
 * @param apiV3 the v3 API instance to use
 * @param object the object to create
 * @throws {ApiObjectExistsError} if the object name already exists
 * @throws {HttpError} if it receives any other non-2XX result
 */
async function createObject(apiV3, object) {
    validateCreateObject(object, apiV3.getContext());
    try {
        return await apiV3.post('/schema/objects', object);
    }
    catch (e) {
        if (e instanceof ApiV3_1.ApiV3.HttpError && e.response) {
            const invalids = e.response.data && e.response.data.detail && e.response.data.detail.invalids;
            if ((0, invalidsContain_1.invalidsContain)(invalids, 'name', (reason) => /^already used/.test(reason))) {
                throw new ApiObjectExistsError_1.ApiObjectExistsError(e);
            }
        }
        throw e;
    }
}
/**
 * @hidden
 * Temporary validation until we update milton
 */
function validateCreateObject(object, context) {
    if (context && context.app_id) {
        const prefix = `${context.app_id}_`;
        if (!object.name.startsWith(prefix)) {
            throw new ApiSchemaValidationError_1.ApiSchemaValidationError(`object name ${object.name} must be prefixed with ${prefix}`);
        }
        if (object.alias && !object.alias.startsWith(prefix)) {
            throw new ApiSchemaValidationError_1.ApiSchemaValidationError(`object alias ${object.name} must be prefixed with ${prefix}`);
        }
        if (!object.display_name.startsWith(context.display_name)) {
            throw new ApiSchemaValidationError_1.ApiSchemaValidationError(`object display name ${object.display_name} must be prefixed with ${context.display_name}`);
        }
    }
}
//# sourceMappingURL=objects.js.map