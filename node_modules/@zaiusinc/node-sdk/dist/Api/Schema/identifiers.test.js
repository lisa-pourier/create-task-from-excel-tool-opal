"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("jest");
const ApiV3_1 = require("../lib/ApiV3");
const ApiIdentifierExistsError_1 = require("./ApiIdentifierExistsError");
const ApiSchemaValidationError_1 = require("./ApiSchemaValidationError");
const identifiers_1 = require("./identifiers");
const mockConfiguration = {
    apiBasePath: 'https://api.zaius.com/v3/',
    apiKey: 'api-key'
};
const mockAppConfiguration = {
    apiBasePath: 'https://api.zaius.com/v3/',
    apiKey: 'api-key',
    appContext: {
        app_id: 'test',
        display_name: 'Test App',
        version: '1.0.0',
        vendor: 'optimizely'
    }
};
let apiV3;
describe('identifiers', () => {
    describe('createIdentifier', () => {
        beforeAll(() => {
            apiV3 = new ApiV3_1.ApiV3.API(mockConfiguration);
        });
        it('sends a post to /schema/objects', async () => {
            const postFn = jest.spyOn(apiV3, 'post').mockResolvedValueOnce({});
            const identifier = {
                name: 'my_thing_id',
                display_name: 'My Thing ID',
                merge_confidence: 'low'
            };
            await (0, identifiers_1.createIdentifier)(apiV3, identifier);
            expect(postFn).toHaveBeenCalledWith('/schema/identifiers', identifier);
            postFn.mockRestore();
        });
        it('throws an error if the api returns an error', async () => {
            const postFn = jest
                .spyOn(apiV3, 'post')
                .mockRejectedValueOnce(new ApiV3_1.ApiV3.HttpError('Bad Request', undefined, {}));
            const identifier = {
                name: 'my_thing_id',
                display_name: 'My Thing ID',
                merge_confidence: 'low'
            };
            await expect((0, identifiers_1.createIdentifier)(apiV3, identifier)).rejects.toThrowError('Bad Request');
            postFn.mockRestore();
        });
        it('throws an exists error if the identifier already exists', async () => {
            const postFn = jest.spyOn(apiV3, 'post').mockRejectedValueOnce(new ApiV3_1.ApiV3.HttpError('Bad Request', undefined, {
                data: {
                    detail: {
                        invalids: [
                            {
                                field: 'customers.name',
                                reason: 'already used by another field'
                            }
                        ]
                    }
                }
            }));
            const identifier = {
                name: 'my_thing_id',
                display_name: 'My Thing ID',
                merge_confidence: 'low'
            };
            await expect((0, identifiers_1.createIdentifier)(apiV3, identifier)).rejects.toThrowError(ApiIdentifierExistsError_1.ApiIdentifierExistsError);
            postFn.mockRestore();
        });
    });
    describe('validateCreateIdentifiers', () => {
        beforeAll(() => {
            apiV3 = new ApiV3_1.ApiV3.API(mockAppConfiguration);
        });
        it('allows identifiers prefixed with app_id', async () => {
            const postFn = jest.spyOn(apiV3, 'post').mockResolvedValueOnce({});
            const identifier = {
                name: 'test_my_thing_id',
                display_name: 'Test App My Thing ID',
                merge_confidence: 'low'
            };
            await (0, identifiers_1.createIdentifier)(apiV3, identifier);
            expect(postFn).toHaveBeenCalledWith('/schema/identifiers', identifier);
            postFn.mockRestore();
        });
        it('throws a validation error if a identifier is not prefixed with app_id', async () => {
            const identifier = {
                name: 'other_id',
                display_name: 'Other ID',
                merge_confidence: 'low'
            };
            await expect((0, identifiers_1.createIdentifier)(apiV3, identifier)).rejects.toThrowError(ApiSchemaValidationError_1.ApiSchemaValidationError);
        });
        it('throws a validation error if a identifier display name is not prefixed with app display name', async () => {
            const identifier = {
                name: 'test_my_thing_id',
                display_name: 'My Thing ID',
                merge_confidence: 'low'
            };
            await expect((0, identifiers_1.createIdentifier)(apiV3, identifier))
                .rejects.toThrowError(/identifier display name.*must be prefixed/);
        });
    });
});
//# sourceMappingURL=identifiers.test.js.map