"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnabledModules = getEnabledModules;
exports.enableModule = enableModule;
const ApiV3_1 = require("../lib/ApiV3");
const ApiModuleAlreadyEnabledError_1 = require("./ApiModuleAlreadyEnabledError");
const invalidsContain_1 = require("./invalidsContain");
/**
 * Gets the list of enabled schema modules.
 * @param apiV3 the v3 API instance to use
 * @throws {HttpError} if it receives a non-2XX result
 */
async function getEnabledModules(apiV3) {
    return await apiV3.get('/schema/modules');
}
/**
 * Enables a schema module.
 * @param apiV3 the v3 API instance to use
 * @param module the module to enable
 * @throws {ApiModuleAlreadyEnabledError} if the module was already enabled
 * @throws {HttpError} if it receives any other non-2XX result
 */
async function enableModule(apiV3, module) {
    try {
        return await apiV3.post('/schema/modules', { module });
    }
    catch (e) {
        if (e instanceof ApiV3_1.ApiV3.HttpError && e.response) {
            const invalids = e.response.data && e.response.data.detail && e.response.data.detail.invalids;
            if ((0, invalidsContain_1.invalidsContain)(invalids, 'module', (reason) => reason === 'already enabled')) {
                throw new ApiModuleAlreadyEnabledError_1.ApiModuleAlreadyEnabledError(e);
            }
        }
        throw e;
    }
}
//# sourceMappingURL=modules.js.map