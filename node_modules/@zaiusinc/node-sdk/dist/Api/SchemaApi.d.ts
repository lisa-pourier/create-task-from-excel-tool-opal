import { Schema } from './Schema';
import { ApiV3, CreateIdentifierResponse, FieldDefinition, IdentifierDefinition, ModulesResponse, ObjectDefinition, RelationDefinition } from './Types';
import { ODPClient } from './index';
export declare class SchemaApi implements Schema {
    private client;
    constructor(client: ODPClient);
    createField: (schemaObject: string, field: FieldDefinition) => Promise<ApiV3.HttpResponse<FieldDefinition>>;
    createIdentifier: (identifier: IdentifierDefinition) => Promise<ApiV3.HttpResponse<CreateIdentifierResponse>>;
    createObject: (schemaObject: ObjectDefinition) => Promise<ApiV3.HttpResponse<ObjectDefinition>>;
    createRelation: (schemaObject: string, relation: RelationDefinition) => Promise<ApiV3.HttpResponse<RelationDefinition>>;
    enableModule: (module: string) => Promise<ApiV3.HttpResponse<ModulesResponse>>;
    getAllObjects: () => Promise<ApiV3.HttpResponse<ObjectDefinition[]>>;
    getEnabledModules: () => Promise<ApiV3.HttpResponse<ModulesResponse>>;
    getObject: (name: string) => Promise<ApiV3.HttpResponse<ObjectDefinition>>;
}
//# sourceMappingURL=SchemaApi.d.ts.map