"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("jest");
const nock_1 = __importDefault(require("nock"));
const node_fetch_1 = require("node-fetch");
const index_1 = require("./index");
const mockConfiguration = {
    apiBasePath: 'https://api.zaius.com/v3/',
    apiKey: 'api-key',
};
describe('module scoped configuration', () => {
    it('configured ', async () => {
        index_1.odp.configure(mockConfiguration);
        (0, nock_1.default)('https://api.zaius.com')
            .post('/v3/foo', {})
            .matchHeader('x-api-key', 'api-key')
            .reply(200, { result: 'old-api-key' })
            .post('/v3/bar', {})
            .matchHeader('x-api-key', 'new-api-key')
            .reply(200, { result: 'new-api-key' });
        const result = await index_1.odp.v3Api.post('/foo', {});
        expect(result).toEqual({
            success: true,
            status: 200,
            data: { result: 'old-api-key' },
            statusText: 'OK',
            headers: new node_fetch_1.Headers({ 'content-type': 'application/json' }),
        });
        index_1.odp.configure({
            apiBasePath: 'https://api.zaius.com/v3/',
            apiKey: 'new-api-key',
        });
        const reconfiguredResult = await index_1.odp.v3Api.post('/bar', {});
        expect(reconfiguredResult).toEqual({
            success: true,
            status: 200,
            data: { result: 'new-api-key' },
            statusText: 'OK',
            headers: new node_fetch_1.Headers({ 'content-type': 'application/json' }),
        });
    });
});
//# sourceMappingURL=legacy.api.test.js.map