"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const lists = __importStar(require("./List/lists"));
const subscriptions = __importStar(require("./List/subscriptions"));
const ListsApi_1 = require("./ListsApi");
describe('ListsApi', () => {
    let api;
    let odpClient;
    beforeEach(() => {
        odpClient = new index_1.ODPClient();
        api = new ListsApi_1.ListsApi(odpClient);
    });
    it('should create list', async () => {
        jest.spyOn(lists, 'createList').mockReturnValue(Promise.resolve({}));
        const listName = 'testName';
        await api.createList(listName);
        expect(lists.createList).toHaveBeenCalledWith(odpClient.v3Api, listName);
    });
    it('should get lists', async () => {
        jest.spyOn(lists, 'getLists').mockReturnValue(Promise.resolve({}));
        await api.getLists();
        expect(lists.getLists).toHaveBeenCalledWith(odpClient.v3Api);
    });
    it('should subscribe', async () => {
        jest.spyOn(subscriptions, 'subscribe').mockReturnValue(Promise.resolve({}));
        const listId = 'testId';
        const identifiers = {
            email: 'test@mail.com'
        };
        await api.subscribe(listId, identifiers);
        expect(subscriptions.subscribe).toHaveBeenCalledWith(odpClient.v3Api, listId, identifiers);
    });
    it('should unsubscribe', async () => {
        jest.spyOn(subscriptions, 'unsubscribe').mockReturnValue(Promise.resolve({}));
        const listId = 'testId';
        const identifiers = {
            email: 'test@mail.com'
        };
        await api.unsubscribe(listId, identifiers);
        expect(subscriptions.unsubscribe).toHaveBeenCalledWith(odpClient.v3Api, listId, identifiers);
    });
    it('should update subscription', async () => {
        jest.spyOn(subscriptions, 'updateSubscriptions').mockReturnValue(Promise.resolve({}));
        const listId = 'testId';
        const updates = [{
                subscribed: true,
                'email': 'test@mail.com'
            }];
        await api.updateSubscriptions(listId, updates);
        expect(subscriptions.updateSubscriptions).toHaveBeenCalledWith(odpClient.v3Api, listId, updates);
    });
});
//# sourceMappingURL=ListsApi.test.js.map