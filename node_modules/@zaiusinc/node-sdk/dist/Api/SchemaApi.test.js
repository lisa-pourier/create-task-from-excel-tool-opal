"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const fields = __importStar(require("./Schema/fields"));
const objects = __importStar(require("./Schema/objects"));
const identifiers = __importStar(require("./Schema/identifiers"));
const modules = __importStar(require("./Schema/modules"));
const relations = __importStar(require("./Schema/relations"));
const SchemaApi_1 = require("./SchemaApi");
describe('SchemaApi', () => {
    let api;
    let odpClient;
    beforeEach(() => {
        odpClient = new index_1.ODPClient();
        api = new SchemaApi_1.SchemaApi(odpClient);
    });
    it('should create field', async () => {
        jest.spyOn(fields, 'createField').mockReturnValue(Promise.resolve({}));
        const objectName = 'testObject';
        const field = {
            display_name: 'test field',
            name: 'test_field',
            type: 'string',
        };
        await api.createField(objectName, field);
        expect(fields.createField).toHaveBeenCalledWith(odpClient.v3Api, objectName, field);
    });
    it('should create object', async () => {
        jest.spyOn(objects, 'createObject').mockReturnValue(Promise.resolve({}));
        const objectDefinition = {
            fields: [],
            display_name: 'test object',
            name: 'test_object',
        };
        await api.createObject(objectDefinition);
        expect(objects.createObject).toHaveBeenCalledWith(odpClient.v3Api, objectDefinition);
    });
    it('should get object', async () => {
        jest.spyOn(objects, 'getObject').mockReturnValue(Promise.resolve({}));
        const objectName = 'testObject';
        await api.getObject(objectName);
        expect(objects.getObject).toHaveBeenCalledWith(odpClient.v3Api, objectName);
    });
    it('should get all objects', async () => {
        jest.spyOn(objects, 'getAllObjects').mockReturnValue(Promise.resolve({}));
        await api.getAllObjects();
        expect(objects.getAllObjects).toHaveBeenCalledWith(odpClient.v3Api);
    });
    it('should create identifier', async () => {
        jest.spyOn(identifiers, 'createIdentifier').mockReturnValue(Promise.resolve({}));
        const identifier = {
            display_name: 'test id',
            merge_confidence: 'high',
            name: 'test_id',
        };
        await api.createIdentifier(identifier);
        expect(identifiers.createIdentifier).toHaveBeenCalledWith(odpClient.v3Api, identifier);
    });
    it('should enable module', async () => {
        jest.spyOn(modules, 'enableModule').mockReturnValue(Promise.resolve({}));
        const module = 'testModule';
        await api.enableModule(module);
        expect(modules.enableModule).toHaveBeenCalledWith(odpClient.v3Api, module);
    });
    it('should get enabled modules', async () => {
        jest.spyOn(modules, 'getEnabledModules').mockReturnValue(Promise.resolve({}));
        await api.getEnabledModules();
        expect(modules.getEnabledModules).toHaveBeenCalledWith(odpClient.v3Api);
    });
    it('should create relation', async () => {
        jest.spyOn(relations, 'createRelation').mockReturnValue(Promise.resolve({}));
        const objectName = 'testObject';
        const relation = {
            child_object: 'testChildObject',
            display_name: 'test relation',
            join_fields: [],
            name: 'testRelation',
        };
        await api.createRelation(objectName, relation);
        expect(relations.createRelation).toHaveBeenCalledWith(odpClient.v3Api, objectName, relation);
    });
});
//# sourceMappingURL=SchemaApi.test.js.map