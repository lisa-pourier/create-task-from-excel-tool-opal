"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("jest");
const configure_1 = require("./configure");
const async_hooks_1 = require("async_hooks");
jest.mock('../lib/ApiV3');
describe('configure', () => {
    function runWithAsyncLocalStore(code, internalConfig) {
        const store = new async_hooks_1.AsyncLocalStorage();
        global.ocpContextStorage = store;
        const context = {
            odpNodeSdkConfig: internalConfig
        };
        store.run(context, code);
    }
    it('merges default config with provided config', () => {
        const configuration = {
            apiBasePath: 'https://api.zaius.com/v3/',
            apiKey: 'pub_api_key'
        };
        // set by setup.ts
        const defaultConfig = {
            apiKey: 'private.api_key'
        };
        expect((0, configure_1.configOrDefault)(configuration)).toEqual(Object.assign(defaultConfig, configuration));
    });
    it('deducts apiBasePath from API key', () => {
        expect((0, configure_1.configOrDefault)({
            apiKey: 'public.secret-part'
        }).apiBasePath).toEqual('https://api.zaius.com/v3/');
        expect((0, configure_1.configOrDefault)({
            apiKey: 'public-eu1.secret-part'
        }).apiBasePath).toEqual('https://api.eu1.odp.optimizely.com/v3/');
        expect((0, configure_1.configOrDefault)({
            apiKey: 'public-au1.secret-part'
        }).apiBasePath).toEqual('https://api.au1.odp.optimizely.com/v3/');
    });
    describe('getModuleOrGlobalConfig', () => {
        beforeEach(() => {
            (0, configure_1.clearModuleScopedConfig)();
            global.ocpContextStorage = null;
        });
        it('returns async local storage config defined', () => {
            runWithAsyncLocalStore(() => {
                expect((0, configure_1.getModuleOrGlobalConfig)().apiKey).toEqual('async-store-scoped-api-key');
            }, {
                apiKey: 'async-store-scoped-api-key'
            });
        });
        it('returns module scoped config if defined and async local storage not defined', () => {
            (0, configure_1.setModuleScopedConfig)({
                apiKey: 'module-scoped-api-key'
            });
            expect((0, configure_1.getModuleOrGlobalConfig)().apiKey).toEqual('module-scoped-api-key');
        });
        it('falls back to the default config if no other defined', () => {
            expect((0, configure_1.getModuleOrGlobalConfig)().apiKey).toEqual('private.api_key');
        });
    });
});
//# sourceMappingURL=configure.test.js.map