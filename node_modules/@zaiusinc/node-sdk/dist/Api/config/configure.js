"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configOrDefault = configOrDefault;
exports.getModuleOrGlobalConfig = getModuleOrGlobalConfig;
exports.setModuleScopedConfig = setModuleScopedConfig;
exports.clearModuleScopedConfig = clearModuleScopedConfig;
function getApiBasePath(apiKey, apiBasePath) {
    if (apiBasePath) {
        return apiBasePath;
    }
    let path;
    if (apiKey) {
        let publicKey = apiKey;
        if (publicKey.includes('.')) {
            publicKey = publicKey.substring(0, publicKey.lastIndexOf('.'));
        }
        if (publicKey.endsWith('-eu1')) {
            path = 'https://api.eu1.odp.optimizely.com/v3/';
        }
        else if (publicKey.endsWith('-au1')) {
            path = 'https://api.au1.odp.optimizely.com/v3/';
        }
        else {
            path = 'https://api.zaius.com/v3/';
        }
    }
    else {
        path = 'https://api.zaius.com/v3/';
    }
    return path;
}
/**
 * @hidden
 */
const DEFAULT_CONFIG = Object.freeze({
    apiKey: process.env['ODP_SDK_API_KEY'] || process.env['ZAIUS_SDK_API_KEY'] || '',
    apiBasePath: getApiBasePath(process.env['ODP_SDK_API_KEY'] || process.env['ZAIUS_SDK_API_KEY'] || null)
});
/**
 * @hidden
 *
 * @param newConfig the configuration to use going forward or null to restore defaults
 */
function configOrDefault(newConfig) {
    const apiBasePath = getApiBasePath((newConfig && newConfig.apiKey) || null, (newConfig && newConfig.apiBasePath) || undefined);
    let configuration;
    if (newConfig == null) {
        configuration = Object.assign({}, DEFAULT_CONFIG, { apiBasePath });
    }
    else {
        configuration = Object.assign({}, DEFAULT_CONFIG, { apiBasePath }, newConfig);
    }
    return configuration;
}
/**
 * @hidden
 */
let moduleScopedConfig;
/**
 * @hidden
 *
 */
function getModuleOrGlobalConfig() {
    const asyncLocalStorage = global.ocpContextStorage && global.ocpContextStorage.getStore();
    if (asyncLocalStorage) {
        return asyncLocalStorage.odpNodeSdkConfig;
    }
    else if (moduleScopedConfig != null) {
        return moduleScopedConfig;
    }
    else {
        return configOrDefault(null);
    }
}
/**
 * @hidden
 *
 * @param newConfig the configuration to use going forward or null to restore defaults
 */
function setModuleScopedConfig(config) {
    if (process.env['ODP_SDK_API_DISABLE_MODULE_SCOPE_CONFIG']) {
        throw new Error('Module scoped configuration is disabled');
    }
    moduleScopedConfig = configOrDefault(config);
}
/**
 * @hidden
 *
 * Clears the module scoped configuration
 */
function clearModuleScopedConfig() {
    moduleScopedConfig = null;
}
//# sourceMappingURL=configure.js.map