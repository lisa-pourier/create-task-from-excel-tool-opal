"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ApiV3_1 = require("../lib/ApiV3");
const customer_1 = require("./customer");
describe('customer', () => {
    const mockConfiguration = {
        apiBasePath: 'https://api.zaius.com/v3/',
        apiKey: 'api-key'
    };
    const apiV3 = new ApiV3_1.ApiV3.API(mockConfiguration);
    let postMock;
    beforeEach(() => {
        postMock = jest.spyOn(apiV3, 'post').mockReturnValue(Promise.resolve({}));
    });
    it('sends a transformed post with one customer to /profiles', async () => {
        const payload = { identifiers: { email: 'test@optimizely.com' }, attributes: { name: 'Jim Bob' } };
        const transformedPayload = { attributes: { name: 'Jim Bob', email: 'test@optimizely.com' } };
        await (0, customer_1.customer)(apiV3, payload);
        expect(postMock).toHaveBeenCalledWith('/profiles', transformedPayload);
    });
    it('sends a transformed post with several customers to /profiles', async () => {
        const payload = [
            { identifiers: { email: 'test1@optimizely.com' }, attributes: { name: 'Jim Bob' } },
            { identifiers: { email: 'test2@optimizely.com' }, attributes: { name: 'Bob Joe' } },
            { identifiers: { email: 'test3@optimizely.com' }, attributes: { name: 'Joe Jim' } }
        ];
        const transformedPayload = [
            { attributes: { name: 'Jim Bob', email: 'test1@optimizely.com' } },
            { attributes: { name: 'Bob Joe', email: 'test2@optimizely.com' } },
            { attributes: { name: 'Joe Jim', email: 'test3@optimizely.com' } }
        ];
        await (0, customer_1.customer)(apiV3, payload);
        expect(postMock).toHaveBeenCalledWith('/profiles', transformedPayload);
    });
    it('sanitizes the payload', async () => {
        const payload = {
            identifiers: {
                email: 'test@optimizely.com'
            },
            attributes: {
                name: 'Jim Bob',
                blank: ' ',
                nullValue: null
            }
        };
        const transformedPayload = { attributes: { name: 'Jim Bob', email: 'test@optimizely.com' } };
        await (0, customer_1.customer)(apiV3, payload);
        expect(postMock).toHaveBeenCalledWith('/profiles', transformedPayload);
    });
    it('sanitizes the payload with several customers', async () => {
        const payload = [
            { identifiers: { email: 'test1@optimizely.com' }, attributes: { name: 'Jim Bob', blank: ' ', nullValue: null } },
            { identifiers: { email: 'test2@optimizely.com' }, attributes: { name: 'Bob Joe', blank: ' ', nullValue: null } },
            { identifiers: { email: 'test3@optimizely.com' }, attributes: { name: 'Joe Jim', blank: ' ', nullValue: null } }
        ];
        const transformedPayload = [
            { attributes: { name: 'Jim Bob', email: 'test1@optimizely.com' } },
            { attributes: { name: 'Bob Joe', email: 'test2@optimizely.com' } },
            { attributes: { name: 'Joe Jim', email: 'test3@optimizely.com' } }
        ];
        await (0, customer_1.customer)(apiV3, payload);
        expect(postMock).toHaveBeenCalledWith('/profiles', transformedPayload);
    });
    it('applies PayloadOptions', async () => {
        const payload = {
            identifiers: {
                email: 'test@optimizely.com'
            },
            attributes: {
                name: 'Jim Bob',
                blank: ' ',
                nullValue: null
            }
        };
        const transformedPayload = {
            attributes: { name: 'Jim Bob', email: 'test@optimizely.com', blank: null, nullValue: null }
        };
        await (0, customer_1.customer)(apiV3, payload, { excludeNulls: false });
        expect(postMock).toHaveBeenCalledWith('/profiles', transformedPayload);
    });
    it('applies PayloadOptions with several customers', async () => {
        const payload = [
            { identifiers: { email: 'test1@optimizely.com' }, attributes: { name: 'Jim Bob', blank: ' ', nullValue: null } },
            { identifiers: { email: 'test2@optimizely.com' }, attributes: { name: 'Bob Joe', blank: ' ', nullValue: null } },
            { identifiers: { email: 'test3@optimizely.com' }, attributes: { name: 'Joe Jim', blank: ' ', nullValue: null } }
        ];
        const transformedPayload = [
            { attributes: { name: 'Jim Bob', email: 'test1@optimizely.com', blank: ' ' } },
            { attributes: { name: 'Bob Joe', email: 'test2@optimizely.com', blank: ' ' } },
            { attributes: { name: 'Joe Jim', email: 'test3@optimizely.com', blank: ' ' } }
        ];
        await (0, customer_1.customer)(apiV3, payload, { trimToNull: false });
        expect(postMock).toHaveBeenCalledWith('/profiles', transformedPayload);
    });
    it('throws an error if too many customers are sent in one call', async () => {
        const payload = [];
        for (let i = 0; i < ApiV3_1.ApiV3.BATCH_LIMIT + 1; i++) {
            payload.push({ identifiers: { email: 'test@optimizely.com' }, attributes: { name: 'Jim Bob' } });
        }
        expect.assertions(2);
        try {
            await (0, customer_1.customer)(apiV3, payload);
        }
        catch (error) {
            expect(error.message).toMatch(/maximum batch size/);
            expect(error.code).toEqual(ApiV3_1.ApiV3.ErrorCode.BatchLimitExceeded);
        }
    });
});
//# sourceMappingURL=customer.test.js.map