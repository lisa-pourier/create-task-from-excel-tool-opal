"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("jest");
const nock_1 = __importDefault(require("nock"));
const ApiV3_1 = require("../lib/ApiV3");
const reachability_1 = require("./reachability");
const deep_freeze_1 = __importDefault(require("deep-freeze"));
const mockConfiguration = {
    apiBasePath: 'https://api.zaius.com/v3/',
    apiKey: 'api-key',
};
let apiV3;
describe('reachability', () => {
    describe('updateReachability', () => {
        beforeAll(() => {
            apiV3 = new ApiV3_1.ApiV3.API(mockConfiguration);
        });
        it('sends a post to /reachability', async () => {
            const update = Object.freeze({
                identifier_field_name: 'email',
                identifier_value: 'foo@optimizely.com',
                reachable: false,
                reachable_update_reason: 'hard_bounce',
            });
            (0, nock_1.default)('https://api.zaius.com')
                .post('/v3/reachability', [update])
                .reply(200, '{}');
            await (0, reachability_1.updateReachability)(apiV3, update);
            expect(nock_1.default.isDone()).toBeTruthy();
        });
        it('handles multiple updates', async () => {
            const update = (0, deep_freeze_1.default)([
                {
                    identifier_field_name: 'email',
                    identifier_value: 'foo@optimizely.com',
                    reachable: false,
                    reachable_update_reason: 'hard_bounce',
                },
                {
                    identifier_field_name: 'email',
                    identifier_value: 'bar@optimizely.com',
                    reachable: true,
                    reachable_update_reason: 'hard_bounce',
                },
            ]);
            (0, nock_1.default)('https://api.zaius.com')
                .post('/v3/reachability', update)
                .reply(200, '{}');
            await (0, reachability_1.updateReachability)(apiV3, update);
            expect(nock_1.default.isDone()).toBeTruthy();
        });
        it('throws an error if the api returns an error', async () => {
            const update = {
                identifier_field_name: 'email',
                identifier_value: 'foo@optimizely.com',
                reachable: false,
            };
            (0, nock_1.default)('https://api.zaius.com')
                .post('/v3/reachability', [update])
                .reply(400, '{}');
            await expect((0, reachability_1.updateReachability)(apiV3, update)).rejects.toThrowError('Bad Request');
            expect(nock_1.default.isDone()).toBeTruthy();
        });
        it('throws an error if the batch is too large', async () => {
            const updates = Array(101).fill({
                identifier_field_name: 'email',
                identifier_value: 'foo@optimizely.com',
                reachable: true,
            });
            await expect((0, reachability_1.updateReachability)(apiV3, updates)).rejects.toThrowError('maximum batch size');
        });
        it('converts date if provided as a Date object', async () => {
            jest.spyOn(Date.prototype, 'getTime').mockReturnValueOnce(1579648074373);
            const update = Object.freeze({
                identifier_field_name: 'email',
                identifier_value: 'foo@optimizely.com',
                reachable: false,
                reachable_update_reason: 'preference center update',
                reachable_update_ts: new Date(),
            });
            const expectedUpdate = {
                ...update,
                reachable_update_ts: 1579648074,
            };
            (0, nock_1.default)('https://api.zaius.com')
                .post('/v3/reachability', [expectedUpdate])
                .reply(200, '{}');
            await (0, reachability_1.updateReachability)(apiV3, update);
            expect(nock_1.default.isDone()).toBeTruthy();
        });
        it('converts date if provided as an string', async () => {
            jest.spyOn(Date.prototype, 'getTime').mockReturnValueOnce(1579648074373);
            const update = Object.freeze({
                identifier_field_name: 'email',
                identifier_value: 'foo@optimizely.com',
                reachable: false,
                reachable_update_reason: 'preference center update',
                reachable_update_ts: '2020-01-21T23:07:54.373Z',
            });
            const expectedUpdate = {
                ...update,
                reachable_update_ts: 1579648074,
            };
            (0, nock_1.default)('https://api.zaius.com')
                .post('/v3/reachability', [expectedUpdate])
                .reply(200, '{}');
            await (0, reachability_1.updateReachability)(apiV3, update);
            expect(nock_1.default.isDone()).toBeTruthy();
        });
    });
    describe('getReachability', () => {
        it('sends a get to /reachability/{identifier}', async () => {
            (0, nock_1.default)('https://api.zaius.com').get('/v3/reachability/email?id=foo%40optimizely.com').reply(200, '{}');
            await (0, reachability_1.getReachability)(apiV3, 'email', 'foo@optimizely.com');
            expect(nock_1.default.isDone()).toBeTruthy();
        });
        it('safely encodes url values', async () => {
            (0, nock_1.default)('https://api.zaius.com').get('/v3/reachability/em%20ail?id=%22foo%22%40optimizely.com').reply(200, '{}');
            await (0, reachability_1.getReachability)(apiV3, 'em ail', '"foo"@optimizely.com');
            expect(nock_1.default.isDone()).toBeTruthy();
        });
    });
});
//# sourceMappingURL=reachability.test.js.map