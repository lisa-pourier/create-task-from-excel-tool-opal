"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConsent = updateConsent;
exports.getConsent = getConsent;
const util_1 = require("util");
const ApiV3_1 = require("../lib/ApiV3");
/**
 * Update consent of a messaging identifier
 * @param apiV3 the v3 API instance to use
 * @param updates one or more updates to consent for specific identifier values
 * @throws {HttpError} if it receives any non-2XX result
 */
async function updateConsent(apiV3, updates) {
    if (!Array.isArray(updates)) {
        updates = [updates];
    }
    if (updates.length > ApiV3_1.ApiV3.BATCH_LIMIT) {
        throw apiV3.errorForCode(ApiV3_1.ApiV3.ErrorCode.BatchLimitExceeded);
    }
    // if we're going to make changes, clone the array first
    if (updates.some((u) => !(0, util_1.isNumber)(u.consent_update_ts))) {
        updates = [...updates];
    }
    for (let i = 0; i < updates.length; i++) {
        const update = updates[i];
        let ts = update.consent_update_ts;
        if (typeof ts === 'string') {
            ts = new Date(ts);
        }
        if (ts instanceof Date) {
            // create a new object to not modify the incoming object
            updates[i] = { ...update, consent_update_ts: Math.round(ts.getTime() / 1000) };
        }
    }
    return await apiV3.post('/consent', updates);
}
/**
 * Get consent information about an identifier
 * @param apiV3 the v3 API instance to use
 * @param identifierName The name of the messaging identifier field for which you want to check consent
 * @param identifierValue The identifier value to lookup, e.g., a specific email address when identifierName is `email`
 * @throws {HttpError} if it receives any non-2XX result
 */
async function getConsent(apiV3, identifierName, identifierValue) {
    return await apiV3.get(`/consent/${encodeURIComponent(identifierName)}?id=${encodeURIComponent(identifierValue)}`);
}
//# sourceMappingURL=consent.js.map