"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const events = __importStar(require("./Events/event"));
const customers = __importStar(require("./Customers/customer"));
const objects = __importStar(require("./Objects/object"));
const graphql = __importStar(require("./GraphQL/graphql"));
describe('ODPClient', () => {
    let odpClient;
    beforeEach(() => {
        odpClient = new index_1.ODPClient();
    });
    it('should send event', async () => {
        jest.spyOn(events, 'event').mockReturnValue(Promise.resolve({}));
        const payload = {
            data: {},
            identifiers: {},
            type: 'order'
        };
        await odpClient.event(payload);
        expect(events.event).toHaveBeenCalledWith(odpClient.v3Api, payload);
    });
    it('should send customer', async () => {
        jest.spyOn(customers, 'customer').mockReturnValue(Promise.resolve({}));
        const payload = {
            attributes: {}, identifiers: {}
        };
        await odpClient.customer(payload);
        expect(customers.customer).toHaveBeenCalledWith(odpClient.v3Api, payload, undefined);
    });
    it('should send object', async () => {
        jest.spyOn(objects, 'object').mockReturnValue(Promise.resolve({}));
        const payload = {
            type: 'order'
        };
        const type = 'testType';
        await odpClient.object(type, payload);
        expect(objects.object).toHaveBeenCalledWith(odpClient.v3Api, type, payload, undefined);
    });
    it('should send graphql query', async () => {
        jest.spyOn(graphql, 'graphql').mockReturnValue(Promise.resolve({}));
        const query = 'test query';
        await odpClient.graphql(query);
        expect(graphql.graphql).toHaveBeenCalledWith(odpClient.v3Api, query, undefined);
    });
});
//# sourceMappingURL=ODPClient.test.js.map