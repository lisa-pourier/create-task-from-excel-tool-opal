import path from 'node:path';
import { fileURLToPath } from 'node:url';
import { FlatCompat } from '@eslint/eslintrc';
import { fixupPluginRules } from '@eslint/compat';
import js from '@eslint/js';
import _import from 'eslint-plugin-import';
import jsdoc from 'eslint-plugin-jsdoc';
import preferArrow from 'eslint-plugin-prefer-arrow';
import typescriptEslint from '@typescript-eslint/eslint-plugin';
import tsParser from '@typescript-eslint/parser';
import stylistic from '@stylistic/eslint-plugin';

// Resolve paths
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Compatibility settings
const compat = new FlatCompat({
  baseDirectory: __dirname,
  recommendedConfig: js.configs.recommended,
  allConfig: js.configs.all,
});

export default [
  {
    ignores: ['**/dist', '**/build', '**/docs', '**/*.md'],
  },
  ...compat.extends(
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking'
  ),
  {
    plugins: {
      import: fixupPluginRules(_import),
      jsdoc,
      'prefer-arrow': preferArrow,
      '@typescript-eslint': typescriptEslint,
      '@stylistic': stylistic,
    },

    languageOptions: {
      parser: tsParser,
      ecmaVersion: 2022,
      sourceType: 'module',
      parserOptions: {
        project: 'tsconfig.json',
      },
    },

    settings: {
      'import/parsers': {
        '@typescript-eslint/parser': ['.ts'],
      },
      'import/resolver': {
        typescript: {
          alwaysTryTypes: true,
        },
      },
    },

    rules: {
      // TypeScript Rules
      '@typescript-eslint/adjacent-overload-signatures': 'error',
      '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
      '@typescript-eslint/no-restricted-types': ['error', {
        types: {
          Object: { message: 'Avoid using `Object`. Use `object` instead.' },
          Function: { message: 'Prefer specific function types, like `() => void`.' },
          Boolean: { message: 'Use `boolean` instead of `Boolean`.' },
          Number: { message: 'Use `number` instead of `Number`.' },
          String: { message: 'Use `string` instead of `String`.' },
          Symbol: { message: 'Use `symbol` instead of `Symbol`.' },
        },
      }],
      '@typescript-eslint/consistent-type-assertions': 'error',
      '@typescript-eslint/consistent-type-definitions': 'error',
      '@typescript-eslint/no-empty-function': 'error',
      '@typescript-eslint/no-empty-interface': 'error',
      '@typescript-eslint/no-floating-promises': 'error',
      '@typescript-eslint/no-misused-new': 'error',
      '@typescript-eslint/no-shadow': ['error', { hoist: 'all' }],
      '@typescript-eslint/no-unused-expressions': ['error', { allowShortCircuit: true }],
      '@typescript-eslint/no-var-requires': 'error',
      '@typescript-eslint/no-use-before-define': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/prefer-for-of': 'error',
      '@typescript-eslint/no-namespace': 'off',
      '@typescript-eslint/no-unsafe-argument': 'off',
      '@typescript-eslint/no-unsafe-member-access': 'off',
      '@typescript-eslint/no-unsafe-assignment': 'off',
      '@typescript-eslint/no-unsafe-return': 'off',
      '@typescript-eslint/no-redundant-type-constituents': 'warn',
      '@typescript-eslint/member-ordering': 'off',
      '@typescript-eslint/no-parameter-properties': 'off',
      '@typescript-eslint/naming-convention': 'off',
      '@typescript-eslint/prefer-function-type': 'error',
      '@typescript-eslint/unified-signatures': 'error',
      '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_.*' }],
      '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: false }],
      '@typescript-eslint/require-await': 'off',
      '@typescript-eslint/explicit-function-return-type': 'off',
      '@typescript-eslint/explicit-member-accessibility': ['error', { accessibility: 'explicit' }],
      '@typescript-eslint/restrict-template-expressions': [
        'warn',
        {
          'allowRegExp': true,
          'allowNullish': true,
          'allowAny': true,
          'allowBoolean': true,
          'allowNumber': true,
        }
      ],

      // Stylistic Rules
      'quotes': ['error', 'single', { avoidEscape: true }],
      '@stylistic/semi': ['error', 'always'],
      '@stylistic/type-annotation-spacing': 'error',
      '@stylistic/space-infix-ops': 'error',
      '@stylistic/member-delimiter-style': [
        'error',
        { multiline: { delimiter: 'semi', requireLast: true }, singleline: { delimiter: 'semi', requireLast: false } },
      ],
      'keyword-spacing': ['error', { before: true, after: true }],
      'comma-spacing': ['error', { before: false, after: true }],
      'arrow-body-style': 'error',
      'arrow-parens': ['error', 'always'],
      'brace-style': ['error', '1tbs'],
      'indent': ['error', 2, { FunctionDeclaration: { parameters: 'first' }, FunctionExpression: { parameters: 'first' } }],
      'max-len': ['error', { ignorePattern: '^import', code: 120 }],
      'no-trailing-spaces': 'error',
      'spaced-comment': ['error', 'always', { markers: ['/'] }],
      'space-before-function-paren': ['error', { anonymous: 'never', asyncArrow: 'always', named: 'never' }],

      // General ESLint Rules
      'constructor-super': 'error',
      'curly': ['error', 'multi-line'],
      'dot-notation': 'off',
      'eol-last': 'error',
      'eqeqeq': ['error', 'smart'],
      'guard-for-in': 'error',
      'import/order': 'off',
      'max-classes-per-file': ['error', 1],
      'new-parens': 'error',
      'no-bitwise': 'error',
      'no-caller': 'error',
      'no-cond-assign': 'error',
      'no-console': 'off',
      'no-debugger': 'error',
      'no-empty': 'error',
      'no-eval': 'error',
      'no-new-wrappers': 'error',
      'no-throw-literal': 'error',
      'no-undef-init': 'error',
      'no-unsafe-finally': 'error',
      'no-unused-labels': 'error',
      'no-var': 'error',
      'object-shorthand': 'error',
      'one-var': ['error', 'never'],
      'prefer-const': 'error',
      'use-isnan': 'error',
      'valid-typeof': 'off',
    },
  },
];